// Salto
// (c) Charles CH Cohen, 2014-present
// this software is released to the public under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
// International license (CC BY-NC-ND 4.0, in English).
// for any questions, please email c.cohen@gmx.com



print "Salto â€“ Setup"
print "Simulation setup details"
print "Run once per cell"


// ------------------------------Directories---------------------------------------
strdef root, lib, ses
root = getcwd()

sprint(lib, "%s%s", root, "lib/")
sprint(ses, "%s%s", root, "ses/")
// --------------------------------------------------------------------------------



// -------------------------------Libraries----------------------------------------
load_file("stdgui.hoc")
chdir(lib)
load_file("startlib.hoc")
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
// cell type
setcelltype()

// Is there recording data?
strdef idataqstr
sprint(idataqstr, "%s", "Is there current-clamp recording data?\t[y/n]")
idata = sred(idataqstr, "y", "ny")
writebit(ses, "idata.dat", idata)
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
if (idata) {

	print "\n-------------------Import Recorded Data-----------------------"
	// Recording temperature
	strdef tempqstr
	sprint(tempqstr, "%s", "Please enter recording temperature (degrees celsius):\t")
	temprec = xred(tempqstr, 35.3, 0, 100)
	writenum(ses, "temprec.dat", temprec)

	// Bessel filter setting
	strdef bessqstr
	bessqstr = "Please enter Bessel filter (\"Vm filter\") setting on the recording amplifier (kHz):\t"
	bess = xred(bessqstr, 10, 1, 30)
	writenum(ses, "bessfil.dat", bess)
	
	// Recording location data
	import_recloc_data()

	// Passive or active data?
	strdef modeqstr
	modeqstr = "\nDo you wish to set up passive conditions only, active conditions only, or both? Currently requires recording data for each condition.\nPassive = 0\nActive = 1\nBoth = 2\t"
	ans = xred(modeqstr, 2, 0, 2)	

	if (ans == 2) {

		print "\nPlease import passive data:\n"

		mode_ = 0
		writebit(ses, "mode.dat", mode_)
		setfilestr(mode_, idata)

		// delay before current injection (ms)
		strdef idelqstr
		idelqstr = "Please enter delay to injection start (ms):\t"
		idel = xred(idelqstr, 9.375, 0, 1000)
		writenum(ses, idelfilestr, idel)

		// duration of current injection (ms)
		strdef idurqstr
		idurqstr = "Please enter duration of current injections (ms):\t"
		idur = xred(idurqstr, 1.875, 0, 1000)
		writenum(ses, idurfilestr, idur)

		// import injection and recorded voltage data
		importdata()

		writenum(ses, "iamp-pas.dat", iampvec.x[0])

		print "\nPlease import active data:\n"

		mode_ = 1
		writebit(ses, "mode.dat", mode_)
		setfilestr(mode_, idata)

		// delay before current injection (ms)
		strdef idelqstr
		idelqstr = "Please enter delay to injection start (ms):\t"
		idel = xred(idelqstr, 5, 0, 1000)
		writenum(ses, idelfilestr, idel)

		// duration of current injection (ms)
		strdef idurqstr
		idurqstr = "Please enter duration of current injections (ms):\t"
		idur = xred(idurqstr, 3, 0, 1000)
		writenum(ses, idurfilestr, idur)

		// import injection amplitudes and recorded voltage
		importdata()

		writenum(ses, "iamp-act.dat", iampvec.x[0])
		writebit(ses, "mode.dat", 0)
	}

	if (ans == 0) {

		print "\nPlease import passive data:\n"

		mode_ = 0
		writebit(ses, "mode.dat", mode_)
		setfilestr(mode_, idata)

		// delay before current injection (ms)
		strdef idelqstr
		idelqstr = "Please enter delay to injection start (ms):\t"
		idel = xred(idelqstr, 9.375, 0, 1000)
		writenum(ses, idelfilestr, idel)

		// duration of current injection (ms)
		strdef idurqstr
		idurqstr = "Please enter duration of current injections (ms):\t"
		idur = xred(idurqstr, 1.875, 0, 1000)
		writenum(ses, idurfilestr, idur)

		// import injection amplitudes and recorded voltage
		importdata()

		writenum(ses, "iamp-pas.dat", iampvec.x[0])
	}

	if (ans == 1) {

		print "\nPlease import active data:\n"

		mode_ = 1
		writebit(ses, "mode.dat", 1)
		setfilestr(mode_, idata)

		// delay before current injection (ms)
		strdef idelqstr
		idelqstr = "Please enter delay to injection start (ms):\t"
		idel = xred(idelqstr, 5, 0, 1000)
		writenum(ses, idelfilestr, idel)

		// duration of current injection (ms)
		strdef idurqstr
		idurqstr = "Please enter duration of current injections (ms):\t"
		idur = xred(idurqstr, 3, 0, 1000)
		writenum(ses, idurfilestr, idur)

		// import injection amplitudes and recorded voltage
		importdata()

		writenum(ses, "iamp-act.dat", iampvec.x[0])
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
// Morphological detail
strdef mintauqstr
mintauqstr = "\nPlease enter minimum expected tau_m across recording locations (ms):\n(Used for setting nseg via d_lambda rule)\t"
mintau0 = (1e-3)*xred(mintauqstr, 1, 1e-3, 1e3)
writenum(ses, "mintau0.dat", mintau0)

// Define axon type
strdef axonqstr
axonqstr = "\nPlease select an axon type:\n1 = no myelin\n2 = single cable\n3 = double cable without paranodes\n4 = double cable with paranodes\t"
axontype = xred(axonqstr, 4, 1, 4)
writebit(ses, "axontype.dat", axontype)

if (axontype > 1) {

	strdef grqstr
	grqstr = "\nPlease enter expected g ratio:\t"
	gr = xred(grqstr, 0.7, 0.001, 0.999)
	writenum(ses, "gr.dat", gr)

	strdef mintnodqstr
	mintnodqstr = "\nPlease enter minimum expected internode to node length ratio:\t"
	mintnod = xred(mintnodqstr, 10, 2, 100)
	writenum(ses, "mintnod.dat", mintnod)

	strdef paranodqstr
	paranodqstr = "\nPlease indicate whether paranodes are included in the morphological reconstruction:\t[y/n]"
	paranod = sred(paranodqstr, "y", "ny")
	writebit(ses, "paranode.dat", paranod)

	if (paranod) {

		strdef juxtaparanodqstr
		juxtaparanodqstr = "\nIn addition, please indicate whether JUXTAparanodes are included in the morphological reconstruction:\t[y/n]"
		juxtaparanod = sred(juxtaparanodqstr, "y", "ny")
		writebit(ses, "juxtaparanode.dat", juxtaparanod)
	
	} else {

		writebit(ses, "juxtaparanode.dat", 0)
	}
}

// simulation time
set_maxtime()
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
print "\n-----------------------------------------------------------"
print "Model setup complete..."
print "\nYou may now open the model via openmodel.hoc (after compilation)."
print "-----------------------------------------------------------\n"
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
strdef compilemodqstr
sprint(compilemodqstr, "%s", "Do you wish to compile the required mod files now?\t[y/n]")
ans = sred(compilemodqstr, "y", "ny")

if (ans) {

	loadfile(root, "compilemod.hoc")
}
// --------------------------------------------------------------------------------
