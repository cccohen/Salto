// Salto
// (c) Charles CH Cohen, 2014-present
// this software is released to the public under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
// International license (CC BY-NC-ND 4.0, in English).
// for any questions, please email c.cohen@gmx.com



// -------------------------------Variables----------------------------------------
objref cellular, somatic, basal, apical, axonal
objref aptrunk, praxonal, collateral, AIS
objref internodal, nodal, axbleb
objref apic0, axon0, aislist, praxlist, prankvec, intlist, nodlist

axbleb_exists = 0
// --------------------------------------------------------------------------------



// -----------------------Larger-purpose sectionlists------------------------------
proc bigsecl() {local countBas, countApic, countAxon

	cellular = new SectionList()
	somatic = new SectionList()
	basal = new SectionList()
	apical = new SectionList()
	axonal = new SectionList()

	countBas = 0
	countApic = 0
	countAxon = 0

	forall {

		ifsec "dend" {

			countBas += 1
		}
		
		ifsec "apic" {

			countApic += 1
		}
		
		ifsec "axon" {

			countAxon += 1
		}
	}


	// assign somatic sections
	soma {

		cellular.append()
		somatic.append()
	}

	// assign basal dendritic sections
	for section = 0, countBas-1 dend[section] {

		cellular.append()
		basal.append()
	}

	// assign apical sections
	for section = 0, countApic-1 apic[section] {

		cellular.append()
		apical.append()
	}

	// assign axonal sections
	for section = 0, countAxon-1 axon[section] {

		cellular.append()
		axonal.append()	
	}
}
// --------------------------------------------------------------------------------



// -----------------------Smaller-purpose sectionlists-----------------------------
proc lilsecl() {local section, start_section, end_section, praxcount localobj templist, tempseclist

	// aptrunk sectionlist to exclude from sps application
	apic[0] apic0 = new SectionRef()
	// the aptrunk sectionlist
	aptrunk = new SectionList()
	// findtrunk exit code/cannot be local
	ftec = 1
	// number of times required to rerecall findtrunk beyond its in-built recursion
	// due to nstack overflow/cannot be local
	ftcount = 0
	
	while (ftec) {

		if (!ftcount) {
			
			findtrunk(apic0, aptrunk)
		
		} else {

			findtrunk(tsecref, aptrunk)
		}
	}

	// applicable sub-sectionlists of axonal to all axon types
	praxonal = new SectionList()
	collateral = new SectionList()

	// getaisloc
	getstrlist(ses, "aisloc.dat", aislist)
	list2seclist(aislist, AIS)

	// secref for axon
	forsec aislist.o(0).label axon0 = new SectionRef()
	
	// findtrunk exit code
	ftec = 1
	// number of times required to rerecall findtrunk beyond its in-built recursion
	// due to nstack overflow
	ftcount = 0
	
	while (ftec) {

		if (!ftcount) {
			
			findtrunk(axon0, praxonal)
		
		} else {

			findtrunk(tsecref, praxonal)
		}
	}

	// define collateral as axonal without praxonal
	forsec axonal {

		collateral.append()
	}

	forsec praxonal {

		collateral.remove()
	}

	// store praxonal as strseclist
	praxlist = new List()
	seclist2list(praxonal, praxlist)

	// find nodes and internodes, and add these to nodal and internodal sectionlists
	if (axontype > 1) {

		if (axbleb_exists) {

			strdef axblebstr
			getstring(ses, "axbleb_loc.dat", axblebstr)
			axbleb = new SectionList()
		
			forsec praxlist.o(praxlist.count-1).label {

				axbleb.append()
			}

			end_section = praxlist.count-2
		
		} else {

			end_section = praxlist.count-1	
		}
		
		internodal = new SectionList()
		nodal = new SectionList()

		// minimum internode length
		mint = getvar(ses, "mint.dat")

		// start checking sections past the AIS
		start_section = 0

		forsec AIS {

			start_section += 1
		}

		for section = start_section, section = end_section {

			forsec praxlist.o(section).label {

				if (L >= mint) {

					internodal.append()
				
				} else {

					nodal.append()
				}
			}
		}
	}
	
	// check total subsection numbers
	praxcount = 0
	
	forsec AIS {

		praxcount += 1
	}
	
	forsec internodal {

		praxcount += 1
	}
	
	forsec nodal {

		praxcount += 1
	}
	
	if (axbleb_exists) {

		praxcount += 1
	}

	if (praxcount != praxlist.count) {

		print "Error: primary axon sub-sectionlists incomplete"
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
func crintlist() {local intcount, nodcount, k, m, q localobj tempseclist, templist

	if (numarg() == 1 && argtype(1) == 2) {

		if (!strcmp($s1, "help")) {

			print "Create list of internode sections and return number of internodes."
			stop
		}
	}

	intcount = 0

	if (axontype > 1) {		
		
		forsec internodal {

			intcount += 1
		}

		intlist = crveclist(intlist, intcount)

		nodcount = 0

		forsec nodal {

			nodcount += 1
		}

		if (nodcount) {

			nodlist = crveclist(nodlist, nodcount)
		}
		
		tempseclist = new SectionList()

		forsec praxonal {

			tempseclist.append()
		}
		
		forsec AIS {

			tempseclist.remove()
		}

		if (axbleb_exists) {

			forsec axbleb {

				tempseclist.remove()
			}
		}

		templist = new List()
		seclist2list(tempseclist, templist)
		
		k = 0		
		m = -1
		r = -1
			
		while (k < templist.count) {

			forsec templist.o(k).label {

				ifsec internodal {

					m += 1
					q = k

					while (q < templist.count) {

						forsec templist.o(k).label {

							ifsec internodal {
							
								intlist.o(m).resize(intlist.o(m).size+1)
								intlist.o(m).x[intlist.o(m).size-1] = sec2secnum(templist.o(q).label)

								q += 1
								k += 1
							}

							ifsec nodal {

								q = templist.count
							}
						}
					}
				}

				ifsec nodal {
					
					r += 1
					q = k

					while (q < templist.count) {

						forsec templist.o(k).label {

							ifsec nodal {
							
								nodlist.o(r).resize(nodlist.o(r).size+1)
								nodlist.o(r).x[nodlist.o(r).size-1] = sec2secnum(templist.o(q).label)

								q += 1
								k += 1
							}

							ifsec internodal {

								q = templist.count
							}
						}
					}
				}	
			}
		}

		k = intlist.count-1

		while (k > m && k < intlist.count) {

			intlist.remove(k)
			k -= 1
		}

		k = nodlist.count-1

		while (k > r && k < nodlist.count) {

			nodlist.remove(k)
			k -= 1
		}		

		return intlist.count
	
	} else {

		return intcount
	}
}
// -----------------------------------------------------------------------------------



// -----------------------------------------------------------------------------------
obfunc getlongint() {local k, q, rowcounter localobj tempvec, tempmat

	tempvec = new Vector()

	if (crintlist()) {

		tempmat = new Matrix(1, 6)
		rowcounter = 1

		for k = 0, intlist.count-1 {

			for q = 0, intlist.o(k).size-1 {

				tempmat.resize(rowcounter, 6)

				tempmat.x[rowcounter-1][0] = k
				tempmat.x[rowcounter-1][1] = intlist.o(k).x[q]
				tempmat.x[rowcounter-1][2] = axon[intlist.o(k).x[q]].L
				tempmat.x[rowcounter-1][3] = axon[intlist.o(k).x[q]].nseg

				rowcounter += 1
			}
		}

		tempmat.setcol(4, tempmat.getcol(2).sort())
		tempmat.setcol(5, tempmat.getcol(2).sortindex())

		return tempmat.getrow(tempmat.x[tempmat.nrow-1][5]).resize(4)
	
	} else {

		return tempvec
	}
}
// -----------------------------------------------------------------------------------



// -----------------------------------------------------------------------------------
obfunc getshortint() {local k, q, rowcounter localobj tempvec, tempmat

	tempvec = new Vector()

	if (crintlist()) {

		tempmat = new Matrix(1, 6)
		rowcounter = 1

		for k = 0, intlist.count-1 {

			for q = 0, intlist.o(k).size-1 {

				tempmat.resize(rowcounter, 6)

				tempmat.x[rowcounter-1][0] = k
				tempmat.x[rowcounter-1][1] = intlist.o(k).x[q]
				tempmat.x[rowcounter-1][2] = axon[intlist.o(k).x[q]].L
				tempmat.x[rowcounter-1][3] = axon[intlist.o(k).x[q]].nseg

				rowcounter += 1
			}
		}

		tempmat.setcol(4, tempmat.getcol(2).sort())
		tempmat.setcol(5, tempmat.getcol(2).sortindex())

		return tempmat.getrow(tempmat.x[0][5]).resize(4)
	
	} else {

		return tempvec
	}
}
// -----------------------------------------------------------------------------------



// -----------------------------------------------------------------------------------
proc chkax() {

	countPrax = 0
	countNod = 0
	countCol = 0

	forsec praxonal {

		countPrax += 1
	}

	forsec nodal {

		countNod += 1
	}

	forsec collateral {

		countCol += 1
	}

	print "countPrax = ", countPrax
	print "countNod = ", countNod
	print "countCol = ", countCol
}
// -------------------------------End defsec------------------------------------------
