// Salto
// (c) Charles CH Cohen, 2014-present
// this software is released to the public under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
// International license (CC BY-NC-ND 4.0, in English).
// for any questions, please email c.cohen@gmx.com



// -------------------------------Variables----------------------------------------
// scale factor for myelin, accounting for the difference in surface area between
// the myelin sheath and axon core. Based on g and ratio entered at setup.
smy = 1/(gr = getvar(ses, "gr.dat"))
// to contain internode numbers (including paranodal sections) requested for demyelination
// by function demyelinate(int1, int2, ..., intn). Each internode number corresponds to the
// same index number in the intlist created by demyelinate().
objref demyvec, intlast

demyvec = new Vector()

strdef strint, strais

demy_conservative = 1
// --------------------------------------------------------------------------------



// --------------------------------setmy-------------------------------------------
// set myelin parameters according to the the myelin scale (smy)
// to account for myelin dimensions (i.e. extra radius over that of the axon core)
// and the extra surface area that affords to the myelin structure to accordingly 
// scale any myelin-specific parameters in axon types involving myelin.
proc setmy() {local k, m, seg, pos, dist_, Kv7_ais_distal

	forsec internodal {

		if (DC || DCPARA) {

			xg[0] *= smy
			xc[0] *= smy
		}
		
		if (SC) {

			g_pas = 1/((Rm_norm * Rm_low) + ((Rmy_norm * Rmy_low)/smy))
			cm = (Cm_norm * Cm_low * Cmy_norm * Cmy_low * smy)/((Cm_norm * Cm_low) + (Cmy_norm * Cmy_low * smy))

			if (per_int_doarg) {
			
				for k = 0, intlist.count-1 {

					for m = 0, intlist.o(k).size-1 {

						axon[intlist.o(k).x[m]] {

							sprint(tempstr, "%s%d%s%d%s", "~g_pas = 1/((Rm_norm * Rm_low) + ((Rmy_", k+1, "_norm * Rmy_", k+1, "_low)/smy))")
							execute(tempstr)

							sprint(tempstr, "%s%d%s%d%s%d%s%d%s", "~cm = (Cm_norm * Cm_low * Cmy_", k+1, "_norm * Cmy_", k+1, "_low * smy)/((Cm_norm * Cm_low) + (Cmy_", k+1, "_norm * Cmy_", k+1, "_low * smy))")
							execute(tempstr)
						}
					}
				}
			}

			if (RmA_doarg) {

				g_pas = 1/((RmA_norm * RmA_low) + ((Rmy_norm * Rmy_low)/smy))
			}

			if (RmI_doarg) {

				g_pas = 1/((RmI_norm * RmI_low) + ((Rmy_norm * Rmy_low)/smy))
			}

			if (exp_doarg) {

				g_pas = 1/((Rm_norm * Rm_low) + (Rm_norm * 20 * Rmy_low)/smy)
				cm = (Cm_norm * Cm_low * (Cm_norm/20) * Cm_low * smy)/((Cm_norm * Cm_low) + ((Cm_norm/20) * Cm_low * smy))
			}			
		}
	}

	if (demyvec.size) {

		demy()
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
proc demyelinate() {local k, i, nint

	if (numarg() == 1 && argtype(1) == 2) {

		if (!strcmp($s1, "help")) {

			print "Enter number corresponding to each internode to demyelinate, starting at 1 (separated by commas)."
			print "To discover the number of internodes, try nint(). To demyelinate all internodes, try demyall()."
			stop
		}
	}	

	demyvec.resize(nint = crintlist())	

	for i = 1, numarg() {

		for k = 0, nint-1 {

			if ($i-1 == k) {

				demyvec.x[k] = 1
				print "Demyelinating internode... ", $i
			}
		}
	}

	init()
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
proc remyelinate() {

	print "Remyelinating all internodes..."	
	
	demyvec.resize(0)
	init()
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
proc demyall() {

	if (DC || DCPARA) {

		forsec internodal {

			xg[0] = 1/Rext
			xc[0] = 0
			xraxial[0] = rext
		}
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
proc demy() {local k, m, nodnum, countseg_ais, countseg_juxta, countseg_para, countseg_nod, countseg_bleb, countseg, seg, pos, r, q, u localobj tempvec

	if (DC || DCPARA) {

		for k = 0, demyvec.size-1 {

			// demyelinate internode k+1
			if (demyvec.x[k]) {	
	
				for m = 0, intlist.o(k).size-1 {

					axon[intlist.o(k).x[m]] {

						xg[0] = 1/Rext
						xc[0] = 0
						xraxial[0] = rext
					}

					if (mode_ == 1) {

					// Rearrange ion channel distribution, a consequence of demyelination.
					
					// NaV: greater presence at formerly paranodal regions, but not beyond (Coman et al. 2006, Hamada et al. 2015).
					// Note: does not apply at first paranode (Hamada et al. 2015)
					// Kv1: greater presence at formerly paranodal regions, but not beyond (Nie et al. 2003).
					// Note: since no explicit evidence of application at first paranode, not applied there.
					// Kv7.3: greater presence at formerly paranodal and juxtaparanodal regions (Hamada et al. 2015).
					// Note: since explicit evidence of application at first paranode and juxtaparanode, applied there.
					
					// Regarding the method of redistribution, the most conservative assumption is made: that no new channels
					// are created, and therefore only redistributed, uniformly, from adjacent regions with higher densities.
					// The redistribution strategy, therefore, consists of counting number of "original" segments and the total number of segments affected,
					// then multiplying down the densities in original regions with original/total segments, and adding in the same in the affected regions,
					// of the same quantity as the most adjacent original segment.
					// A different application of the strategy results in the AIS region/first paranode/juxtaparanode, and therefore the first internode
					// is singled out for special application first. Thereafter, the more general strategy applies. 
					// A similar issue as the first internode is faced at the last, if adjacent to a non-myelinated bleb.

						if (k == 0) {

							if (m == 0) {

								// count nodes
								countseg_ais = 0
								countseg_para = 0
								countseg_juxta = 0

								forsec AIS {

									countseg_ais += nseg
								}

								axon[intlist.o(k).x[m]] {

									for seg = 1, nseg {
									
										pos = (2*seg-1)/(2*nseg)
										dist_ = getdist(secname(), 0, secname(), pos)

										if (dist_ <= paral) {

											countseg_para += 1
										}

										if (dist_ > paral && dist_ <= paral+juxtal) {

											countseg_juxta += 1
										}
									}
								}
								
								countseg = 0

								forsec AIS {

									for seg = 1, nseg {

										pos = (2*seg-1)/(2*nseg)

										if (demy_conservative) {

											// Kv7
											gbar_kv7(pos) *= countseg_ais/(countseg_ais+countseg_para+countseg_juxta)
										}

										countseg += 1

										if (countseg == countseg_ais) {

											tempvec = new Vector(1)
											// last adjacent Kv7
											tempvec.x[0] = gbar_kv7(pos)
										}
									}
								}

								axon[intlist.o(k).x[m]] {

									for seg = 1, nseg {
									
										pos = (2*seg-1)/(2*nseg)
										dist_ = getdist(secname(), 0, secname(), pos)

										if (dist_ <= paral+juxtal) {

											gbar_kv7(pos) = tempvec.x[0]
										}
									}
								}
							}

							// apply general strategy, starting with second paranode
							if (m == intlist.o(k).size-1) {

								if (nodlist.count) {									
									
									countseg_para = 0
									countseg_juxta = 0
									tempvec = new Vector(3)

									axon[intlist.o(k).x[m]] {

										for seg = 1, nseg {
										
											pos = (2*seg-1)/(2*nseg)
											dist_ = getdist(secname(), 1, secname(), pos)

											if (dist_ <= paral) {

												countseg_para += 1
											}

											if (dist_ > paral && dist_ <= paral+juxtal) {

												countseg_juxta += 1
											}
										}
									}

									nodnum = 0
									sscanf(nodlist.o(0).label, "%lf", &nodnum)					
									
									if (nodnum) {

										for r = 0, nodlist.o(k).size-1 {

											axon[nodlist.o(k).x[r]] {
												
												tempvec.x[0] = gbar_nax
												tempvec.x[2] = gbar_kv7
											}
	 	 								}
   								
									} else {

										// count nodes
										countseg_nod = 0

										for r = 0, nodlist.o(k).size-1 {

											axon[nodlist.o(k).x[r]] {

												countseg_nod += nseg
											}
										}

										for r = 0, nodlist.o(k).size-1 {

											axon[nodlist.o(k).x[r]] {

												if (demy_conservative) {

													// NaV
													gbar_nax(pos) *= countseg_nod/(countseg_nod+countseg_para)
													// Kv7
													gbar_kv7(pos) *= countseg_nod/(countseg_nod+countseg_para)
												}

												tempvec.x[0] = gbar_nax
												tempvec.x[2] = gbar_kv7
											}
										}

										sprint(tempstr, "%g", 1)
										nodlist.o(0).label(tempstr)
										tempstr = ""
									}

									countseg = 0

									axon[intlist.o(k).x[m]] {

										for seg = 1, nseg {
										
											pos = (2*seg-1)/(2*nseg)
											dist_ = getdist(secname(), 1, secname(), pos)

											if (dist_ <= paral) {

												gbar_nax(pos) = tempvec.x[0]
												gbar_kv7(pos) = tempvec.x[1]
											}											

											if (dist_ > paral && dist_ <= paral+juxtal && demy_conservative) {

												gbar_kv1ax(pos) *= countseg_juxta/(countseg_juxta+countseg_para)												
											}

											countseg += 1

											if (countseg == countseg_juxta) {

												tempvec.x[1] = gbar_kv1ax(pos)
											}
										}
									}

									axon[intlist.o(k).x[m]] {

										for seg = 1, nseg {
										
											pos = (2*seg-1)/(2*nseg)
											dist_ = getdist(secname(), 1, secname(), pos)

											if (dist_ <= paral) {

												gbar_kv1ax(pos) = tempvec.x[1]
											}
										}
									}

								} else if (axbleb_exists) {									

									axon[intlist.o(k).x[m]] {

										intlast = new SectionRef()
									}

									for r = 0, intlast.nchild-1 {

										intlast.child[r] {

											if (issection(axbleblist.o(0).label)) {

												// count nodes
												countseg_bleb = 0
												countseg_para = 0
												countseg_juxta = 0
												tempvec = new Vector(3)

												for q = 0, axbleblist.count-1 {

													for u = 0, axbleblist.o(q).size-1 {

														axon[axbleblist.o(q).x[u]] {

															countseg_bleb += nseg
														}
													}
												}

												axon[intlist.o(k).x[m]] {

													for seg = 1, nseg {
													
														pos = (2*seg-1)/(2*nseg)
														dist_ = getdist(secname(), 1, secname(), pos)

														if (dist_ <= paral) {

															countseg_para += 1
														}

														if (dist_ > paral && dist_ <= paral+juxtal) {

															countseg_juxta += 1
														}
													}
												}

												countseg = 0

												for q = 0, axbleblist.count-1 {

													for u = 0, axbleblist.o(q).size-1 {

														axon[axbleblist.o(q).x[u]] {

															if (demy_conservative) {

																// NaV
																gbar_nax *= countseg_bleb/(countseg_bleb+countseg_para)
																// Kv7
																gbar_kv7 *= countseg_bleb/(countseg_bleb+countseg_para)
															}

															tempvec.x[0] = gbar_nax
															tempvec.x[2] = gbar_kv7
														}
													}
												}

												countseg = 0

												axon[intlist.o(k).x[m]] {

													for seg = 1, nseg {
													
														pos = (2*seg-1)/(2*nseg)
														dist_ = getdist(secname(), 1, secname(), pos)

														if (dist_ <= paral) {

															gbar_nax(pos) = tempvec.x[0]
															gbar_kv7(pos) = tempvec.x[2]
														}

														if (dist_ > paral && dist_ <= paral+juxtal) {

															countseg += 1
														}

														if (countseg == countseg_juxta) {

															tempvec.x[1] = gbar_kv1ax(pos)
														}
													}
												}		

												axon[intlist.o(k).x[m]] {

													for seg = 1, nseg {
													
														pos = (2*seg-1)/(2*nseg)
														dist_ = getdist(secname(), 1, secname(), pos)

														if (dist_ <= paral+juxtal && dist_ > paral) {

															gbar_kv1ax(pos) = tempvec.x[1]
														}
													}
												}
											}
										}
									}
								}
							}
						
						} else {							

							if (m == 0 && k <= nodlist.count) {								

								countseg_para = 0
								countseg_juxta = 0
								tempvec = new Vector(3)

								axon[intlist.o(k).x[m]] {

									for seg = 1, nseg {
									
										pos = (2*seg-1)/(2*nseg)
										dist_ = getdist(secname(), 0, secname(), pos)

										if (dist_ <= paral) {

											countseg_para += 1
										}

										if (dist_ > paral && dist_ <= paral+juxtal) {

											countseg_juxta += 1
										}
									}
								}

								nodnum = 0
								sscanf(nodlist.o(k).label, "%lf", &nodnum)
								
								if (nodnum) {

									for r = 0, nodlist.o(k).size-1 {

										axon[nodlist.o(k).x[r]] {
											
											tempvec.x[0] = gbar_nax
											tempvec.x[2] = gbar_kv7
										}
									}										
								
								} else {

									// count nodes
									countseg_nod = 0

									for r = 0, nodlist.o(k).size-1 {

										axon[nodlist.o(k).x[r]] {

											countseg_nod += nseg
										}
									}

									for r = 0, nodlist.o(k).size-1 {

										axon[nodlist.o(k).x[r]] {

											if (demy_conservative) {

												// NaV
												gbar_nax(pos) *= countseg_nod/(countseg_nod+countseg_para)
												// Kv7
												gbar_kv7(pos) *= countseg_nod/(countseg_nod+countseg_para)
											}

											tempvec.x[0] = gbar_nax
											tempvec.x[2] = gbar_kv7
										}
									}

									sprint(tempstr, "%g", 1)
									nodlist.o(k).label(tempstr)
									tempstr = ""
								}

								countseg = 0

								axon[intlist.o(k).x[m]] {

									for seg = 1, nseg {
									
										pos = (2*seg-1)/(2*nseg)
										dist_ = getdist(secname(), 0, secname(), pos)

										if (dist_ <= paral) {

											gbar_nax(pos) = tempvec.x[0]
											gbar_kv7(pos) = tempvec.x[1]
										}											

										if (dist_ > paral && dist_ <= paral+juxtal && demy_conservative) {

											gbar_kv1ax(pos) *= countseg_juxta/(countseg_juxta+countseg_para)
										}

										countseg += 1

										if (countseg == countseg_juxta) {

											tempvec.x[1] = gbar_kv1ax(pos)
										}
									}
								}

								axon[intlist.o(k).x[m]] {

									for seg = 1, nseg {
									
										pos = (2*seg-1)/(2*nseg)
										dist_ = getdist(secname(), 0, secname(), pos)

										if (dist_ <= paral) {

											gbar_kv1ax(pos) = tempvec.x[1]
										}
									}
								}
							}

							if (m == intlist.o(k).size-1) {

								if (k < nodlist.count) {									

									countseg_para = 0
									countseg_juxta = 0
									tempvec = new Vector(3)

									axon[intlist.o(k).x[m]] {

										for seg = 1, nseg {
										
											pos = (2*seg-1)/(2*nseg)
											dist_ = getdist(secname(), 1, secname(), pos)

											if (dist_ <= paral) {

												countseg_para += 1
											}

											if (dist_ > paral && dist_ <= paral+juxtal) {

												countseg_juxta += 1
											}
										}
									}

									nodnum = 0
									sscanf(nodlist.o(k+1).label, "%lf", &nodnum)		
									
									if (nodnum) {

										for r = 0, nodlist.o(k).size-1 {

											axon[nodlist.o(k).x[r]] {
												
												tempvec.x[0] = gbar_nax
												tempvec.x[2] = gbar_kv7
											}
										}										
									
									} else {

										// count nodes
										countseg_nod = 0

										for r = 0, nodlist.o(k).size-1 {

											axon[nodlist.o(k).x[r]] {

												countseg_nod += nseg
											}
										}

										for r = 0, nodlist.o(k).size-1 {

											axon[nodlist.o(k).x[r]] {

												if (demy_conservative) {

													// NaV
													gbar_nax(pos) *= countseg_nod/(countseg_nod+countseg_para)
													// Kv7
													gbar_kv7(pos) *= countseg_nod/(countseg_nod+countseg_para)
												}

												tempvec.x[0] = gbar_nax
												tempvec.x[2] = gbar_kv7
											}
										}

										sprint(tempstr, "%g", 1)
										nodlist.o(k+1).label(tempstr)
										tempstr = ""
									}

									countseg = 0

									axon[intlist.o(k).x[m]] {

										for seg = 1, nseg {
										
											pos = (2*seg-1)/(2*nseg)
											dist_ = getdist(secname(), 1, secname(), pos)

											if (dist_ <= paral) {

												gbar_nax(pos) = tempvec.x[0]
												gbar_kv7(pos) = tempvec.x[1]
											}											

											if (dist_ > paral && dist_ <= paral+juxtal && demy_conservative) {

												gbar_kv1ax(pos) *= countseg_juxta/(countseg_juxta+countseg_para)
											}

											countseg += 1

											if (countseg == countseg_juxta) {

												tempvec.x[1] = gbar_kv1ax(pos)
											}
										}
									}

									axon[intlist.o(k).x[m]] {

										for seg = 1, nseg {
										
											pos = (2*seg-1)/(2*nseg)
											dist_ = getdist(secname(), 1, secname(), pos)

											if (dist_ <= paral) {

												gbar_kv1ax(pos) = tempvec.x[1]
											}
										}
									}

								} else if (axbleb_exists) {

									axon[intlist.o(k).x[m]] {

										intlast = new SectionRef()
									}

									for r = 0, intlast.nchild-1 {

										intlast.child[r] {

											if (issection(axbleblist.o(0).label)) {

												// count nodes
												countseg_bleb = 0
												countseg_para = 0
												countseg_juxta = 0
												tempvec = new Vector(3)

												for q = 0, axbleblist.count-1 {

													for u = 0, axbleblist.o(q).size-1 {

														axon[axbleblist.o(q).x[u]] {

															countseg_bleb += nseg
														}
													}
												}

												axon[intlist.o(k).x[m]] {

													for seg = 1, nseg {
													
														pos = (2*seg-1)/(2*nseg)
														dist_ = getdist(secname(), 1, secname(), pos)

														if (dist_ <= paral) {

															countseg_para += 1
														}

														if (dist_ > paral && dist_ <= paral+juxtal) {

															countseg_juxta += 1
														}
													}
												}

												countseg = 0

												for q = 0, axbleblist.count-1 {

													for u = 0, axbleblist.o(q).size-1 {

														axon[axbleblist.o(q).x[u]] {

															if (demy_conservative) {

																// NaV
																gbar_nax *= countseg_bleb/(countseg_bleb+countseg_para)
																// Kv7
																gbar_kv7 *= countseg_bleb/(countseg_bleb+countseg_para)
															}

															tempvec.x[0] = gbar_nax
															tempvec.x[2] = gbar_kv7
														}
													}
												}

												countseg = 0

												axon[intlist.o(k).x[m]] {

													for seg = 1, nseg {
													
														pos = (2*seg-1)/(2*nseg)
														dist_ = getdist(secname(), 1, secname(), pos)

														if (dist_ <= paral) {

															gbar_nax(pos) = tempvec.x[0]
															gbar_kv7(pos) = tempvec.x[2]
														}

														if (dist_ > paral && dist_ <= paral+juxtal) {

															countseg += 1
														}

														if (countseg == countseg_juxta) {

															tempvec.x[1] = gbar_kv1ax(pos)
														}
													}
												}		

												axon[intlist.o(k).x[m]] {

													for seg = 1, nseg {
													
														pos = (2*seg-1)/(2*nseg)
														dist_ = getdist(secname(), 1, secname(), pos)

														if (dist_ <= paral+juxtal && dist_ > paral) {

															gbar_kv1ax(pos) = tempvec.x[1]
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
// --------------------------------------------------------------------------------
