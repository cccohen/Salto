// Salto
// (c) Charles CH Cohen, 2014-present
// this software is released to the public under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
// International license (CC BY-NC-ND 4.0, in English).
// for any questions, please email c.cohen@gmx.com



// -------------------------------Variables----------------------------------------
// mintau0, set to minimal expected value (<10 ms in myelinated axon, based on Cohen et al. 2020).
mintau0 = 1e-3
// fraction of lambda_f function
fracl = 0.2
// fraction by which to modify fraction of lambda_f function
fracfracl = 0.01
// an approximate threshold of total segments above which simulations involving active
// neuronal properties take more than 20s (real time) per run on today's (c. 2010-2020) 
// typical desktop processors
minmaxnseg = 4000
// for storing distances from recording sites
objref distvec
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
func getfreq0() {

	return 1/(2*PI*mintau0)
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
obfunc getmaxminfracl() {local countseg, tempseg, tempRa, tempcm, row, bigd localobj tempvec, tempobj, tempmat

	fracl = $1
	
	countseg = 0	

	forall {

		countseg += nseg
	}

	tempobj = new Vector()

	if (countseg > $2 && axontype < 4) {

		tempobj.resize(2)
		tempobj.x[0] = fracl

		tempmat = new Matrix(1, 3)
		row = 1

		forsec somatic {

			tempmat.x[row-1][0] = Ra
			tempmat.x[row-1][1] = cm
			tempmat.x[row-1][2] = diam
			row += 1
			tempmat.resize(row, 3)

			Ra = 400
			cm = 1
		}

		row = 0
		bigd = tempmat.getcol(2).max

		forsec somatic {

			if (diam == bigd) {

				lambdafdef = lambda_f(5*getfreq0())
			}

			Ra = tempmat.x[row][0]
			cm = tempmat.x[row][1]
			row += 1		
		}

		tempobj.x[1] = lambdafdef
	}	
		
	tempvec = getshortint()

	if (tempvec.size && axontype == 4) {

		// 0: internode number
		// 1: axon section number
		// 2: axon section length
		// 3: axon section nseg
		tempseg = tempvec.x[3]
		paral = setparal()
		
		axon[tempvec.x[1]] {

			tempRa = Ra
			tempcm = cm
			
			Ra = 400
			cm = 1
		}

		while (fracl > 0 && tempvec.x[2]/(2*tempseg) > 0.5*paral) {

			fracl -= fracfracl

			if (fracl > 0) {

				axon[tempvec.x[1]] {

					tempseg = int((tempvec.x[2]/(fracl*lambda_f(5*getfreq0()))+.999)/2)*2+1
				}
			
			} else {

				break
			}
		}

		if (fracl <= 0) {

			fracl = fracfracl
			fracfracl /= 10				
			fracl -= fracfracl

			tempobj.resize(1)
			tempobj.x[0] = fracl

			tempobj = getmaxminfracl(fracl, minmaxnseg)
		
		} else {

			axon[tempvec.x[1]] {

				lambdaf = lambda_f(5*getfreq0())

				Ra = tempRa
				cm = tempcm
			}			
		}

		if (tempseg > tempvec.x[3]) {

			tempobj.resize(2)
			tempobj.x[0] = fracl
			tempobj.x[1] = lambdaf
		}
	}

	return tempobj
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
proc setnseg() {local k, row localobj tempmat

	if (!$1 && $2) {

		for k = 0, piplist.count-1 {

			forsec piplist.o(k) {

				nseg = 1
			}
		}
	}

	// max Ri to maximize nseg in cellular, which lambda_f uses
	tempmat = new Matrix(1, 2)
	row = 1

	forsec cellular {
		
		tempmat.x[row-1][0] = Ra
		tempmat.x[row-1][1] = cm
		row += 1
		tempmat.resize(row, 2)

		Ra = 400
		cm = 1
	}
	
	forsec cellular {
	
		// $3 = fracl
		nseg = int((L/($3*lambda_f(5*getfreq0()))+.999)/2)*2+1
	}

	chknseg($3, $4)

	row = 0
	forsec cellular {

		Ra = tempmat.x[row][0]
		cm = tempmat.x[row][1]
		row += 1
	}

	if (DCPARA) {

		crintlist()
	}	
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
proc chknseg() {localobj tempvec

	tempvec = getmaxminfracl($1, $2)

	if (tempvec.size) {

		fixnseg(tempvec.x[0], tempvec.x[1])
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
proc fixnseg() {local row, k, dist_, out_lambdaf_radius localobj tempmat, tempseclist, distvec

	// max Ri to maximize nseg in cellular, which lambda_f uses
	tempmat = new Matrix(1, 2)
	row = 1

	getcoremodeltype()

	if (SOAX) {

		forsec somatic {

			tempmat.x[row-1][0] = Ra
			tempmat.x[row-1][1] = cm
			row += 1
			tempmat.resize(row, 2)

			Ra = 400
			cm = 1

			nseg = int((L/($1*lambda_f(5*getfreq0()))+.999)/2)*2+1
		}

		forsec praxonal {
			
			tempmat.x[row-1][0] = Ra
			tempmat.x[row-1][1] = cm
			row += 1
			tempmat.resize(row, 2)

			Ra = 400
			cm = 1

			nseg = int((L/($1*lambda_f(5*getfreq0()))+.999)/2)*2+1
		}

		tempseclist = new SectionList()

		forsec cellular {

			tempseclist.append()
		}

		forsec tempseclist {

			ifsec somatic {

				tempseclist.remove()
			}			

			ifsec praxonal {

				tempseclist.remove()
			}
		}
	}

	if (SO) {

		forsec somatic {

			tempmat.x[row-1][0] = Ra
			tempmat.x[row-1][1] = cm
			row += 1
			tempmat.resize(row, 2)

			Ra = 400
			cm = 1

			nseg = int((L/($1*lambda_f(5*getfreq0()))+.999)/2)*2+1
		}

		tempseclist = new SectionList()

		forsec cellular {

			tempseclist.append()
		}

		forsec tempseclist {

			ifsec somatic {

				tempseclist.remove()
			}
		}
	}

	distvec = new Vector(recseclist.count)

	forsec tempseclist {

		tempmat.x[row-1][0] = Ra
		tempmat.x[row-1][1] = cm
		row += 1
		tempmat.resize(row, 2)

		Ra = 400
		cm = 1

		out_lambdaf_radius = 0

		for k = 0, recseclist.count-1 {

			distvec.x[k] = getdist(secname(), 0.5, recseclist.o(k).label, 0.5)
			
			if (distvec.x[k] > $2) {

				out_lambdaf_radius += 1
			}
		}

		if (out_lambdaf_radius == recseclist.count) {
			
			nseg = int((L/($1*(distvec.min/$2)*lambda_f(5*getfreq0()))+.999)/2)*2+1				

		} else {
			
			nseg = int((L/($1*lambda_f(5*getfreq0()))+.999)/2)*2+1
		}
	}
	
	row = 0
	forsec cellular {

		Ra = tempmat.x[row][0]
		cm = tempmat.x[row][1]
		row += 1
	}
}
// --------------------------------------------------------------------------------
