// Salto
// (c) Charles CH Cohen, 2014-present
// this software is released to the public under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
// International license (CC BY-NC-ND 4.0, in English).
// for any questions, please email c.cohen@gmx.com




// --------------------------------------------------------------------------------
func getsteps() {

	if (idata) {

		return 1/(tdatvec.x[1] - tdatvec.x[0])

	} else {

		return 100
	}
}
// --------------------------------------------------------------------------------



// --------------------------------setdt-------------------------------------------
// modified version of the original
proc setdt() {local Dt

	if (using_cvode_) {

		return
	}

	Dt = 1/steps_per_ms
	
	nstep_steprun = int(Dt/dt)
	
	if (nstep_steprun == 0) {
	
		nstep_steprun = 1
	}
	
	dtnew = Dt/nstep_steprun	
	
	if (abs(dt*nstep_steprun*steps_per_ms - 1) > 1e-6) {
		// print "Changed dt"
		dt = dtnew
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
func gettstop() {

	if ($2) {

		return tdatvec.x[tdatvec.size-1]
	
	} else {

		if ($1 == 0) {

			return 100
		
		} else if ($1 == 1) {

			return 50
		}
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
func settol() {local iiamp, iidel, f localobj templist

	if ($1 != -1) {

		iiamp = $1
	
	} else {
	
		iiamp = getvar(ses, iiampfilestr)
	}
	
	iidel = tdatvec.indwhere(">=", getvar(ses, idelfilestr))

	// obtain relevant v and place it (or them) into a list
	templist = new List()
	
	f = 0
	while (f < nf) {

		templist.append(vdatmat.getcol(iiamp*nf+f+1))
		f += 1
	}

	// the combined noise of the recording is defined as the sum of each recording's intrinsic variance
	noisevec = new Vector()
	
	for f = 0, templist.count-1 {

		noisevec.append(templist.o(f).var(0, iidel))
	}

	print "Error tolerance set to ", setnsig(setnsig(noisevec.sum, nsigv), 5), "mV^2\n"
	
	return setnsig(noisevec.sum, nsigv)
}
// --------------------------------------------------------------------------------



// ----------------------------setmaxstepsize--------------------------------------
// takes (1) tol
// outputs maxstepsize = 4sqrt(tol)
func setmaxstepsize() {
	
	return setnsig(4*sqrt($1), nsigv)
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
func getnf() {

	return getstrlist(ses, "fitvarlist.dat", fitvarlist)
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
// takes (1) secname or sectionlist
// outputs average sec diam (um)
func getdiam() {local diameter, Nseg

	if (argtype(1) == 2 && numarg() == 1) {

		if (!strcmp($s1, "help")) {

			print "Input either:"
			print "1) section name as string"
			print "or 2) sectionlist object"
			print "Returns section or sectionlist average diameter"
			stop
		}
	}

	diameter = 0
	Nseg = 0

	if (argtype(1) == 2) {
	
		forsec $s1 {

			Nseg += nseg

			for (x, 0) diameter += diam(x)

		}		

	} else if (argtype(1) == 1) {

		forsec $o1 {

			Nseg += nseg
			
			for (x, 0) diameter += diam(x)
		}
	}

	return diameter/Nseg
}
// --------------------------------------------------------------------------------



// --------------------------------getarea-----------------------------------------
// takes (1) secname
// outputs sec area (um2)
func getarea() {local a

	a = 0

	forsec $s1 for (x, 0) a += area(x)

	return a
}
// --------------------------------------------------------------------------------



// ---------------------------------getG-------------------------------------------
// takes (1) secname
// outputs average G for that section (mho/cm2)
func getG() {local G, Gext, Nseg

	G = 0
	Gext = 0
	Nseg = 0
	
	forsec $s1 {

		Nseg = nseg
		
		if (ismembrane("extracellular")) {

			for (x, 0) {

				G += g_pas(x)
				Gext += xg[0](x)
			}

			return 1/(Nseg * (1/G + 1/Gext))

		} else {

			for (x, 0) {

				G += g_pas(x)
			}

			return G/Nseg
		}
	}
}
// --------------------------------------------------------------------------------



// ---------------------------------getg-------------------------------------------
// takes (1) secname
// outputs average g for that section (mho * cm)
func getg() {

	return getG($s1) * PI * getdiam($s1) * (1e-4)
}
// --------------------------------------------------------------------------------



// ---------------------------------getC-------------------------------------------
// takes (1) secname
// outputs average capacitance (uF/cm2) for that section
func getC() {

	forsec $s1 {

		if (ismembrane("extracellular")) {

			if (xc[0] > 0) {

				return 1/(1/cm + 1/xc[0])

			} else {

				return cm
			}

		} else {

			return cm
		}
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
// takes (1) secname. 
// Outputs tau_sec (ms).
func gettau() {

	return (1/getG($s1)) * getC($s1) * (1e-3)
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
// takes no argument. requires a seticlamp and recloclist.count > 0.
// outputs maximum path length between locstim and recloc (um)
func getmaxrecdist() {local k localobj tempvec

	tempvec = new Vector()
	subloclist = loclist2subloclist(recloclist, subloclist)
	
	for k = 0, recseclist.count-1 {
		
		sscanf(sublocstim, "%lf", &num)
		forsec secstim distance(0, num)
		
		sscanf(subloclist.o(k).label, "%lf", &num)
		forsec recseclist.o(k).label tempvec.append(distance(num))
	}
	
	return tempvec.max
}
// --------------------------------------------------------------------------------



// -----------------------------getminrecdist--------------------------------------
// takes no argument. requires a seticlamp and recloclist.count > 0.
// outputs minimum path length between locstim and recloc (um)
func getminrecdist() {local k localobj tempvec

	tempvec = new Vector()
	loclist2subloclist(recloclist, subloclist)
	
	for k = 0, recseclist.count-1 {

		sscanf(sublocstim, "%lf", &num)
		forsec secstim distance(0, num)

		sscanf(subloclist.o(k).label, "%lf", &num)
		forsec recseclist.o(k).label tempvec.append(distance(num))
	}
	
	return tempvec.min
}
// --------------------------------------------------------------------------------



// -----------------------------getsostimdist--------------------------------------
// takes no argument. requires a seticlamp and recloclist.count > 0.
// outputs path length between soma and locstim (um)
func getsostimdist() {

	sscanf(sublocstim, "%lf", &num)
	forsec secstim distance(0, num)
	forsec "soma" return distance(0.5)
}
// --------------------------------------------------------------------------------



// --------------------------------getsecx-----------------------------------------
// takes secname. requires 3d geometry and a seticlamp.
// outputs avg sec 3d x.
func getsecx() {local n localobj tempxvec
	
	tempxvec = new Vector()

	forsec $s1 {
		
		for n = 0, n3d()-1 { 
		
			tempxvec.append(x3d(n))
		}
	}

	return tempxvec.mean
}
// --------------------------------------------------------------------------------



// --------------------------------getsecy-----------------------------------------
// takes secname. requires 3d geometry and a seticlamp.
// outputs avg sec 3d y.
func getsecy() {local n localobj tempyvec
	
	tempyvec = new Vector()

	forsec $s1 {			
		
		for n = 0, n3d()-1 { 
		
			tempyvec.append(y3d(n))
		}
	}

	return tempyvec.mean
}
// --------------------------------------------------------------------------------



// ---------------------------------getr-------------------------------------------
// takes (1) secname
// outputs average ri (or ri + rext) in secname (Mohm/cm)
func getr() {local r, rext

	r = 0
	rext = 0
	

	forsec $s1 {

		for (x, 0) r += ri(x)
		
		
		if (ismembrane("extracellular")) {

			return (r/(getdist($s1, 0, $s1, 1) * (1e-4))) + 1/xg[0]

		} else {

			return r/(getdist($s1, 0, $s1, 1) * (1e-4))
		}
	}
}
// --------------------------------------------------------------------------------



// ------------------------------getrext-------------------------------------------
// takes (1) secname
// outputs rext only for secname if extracellular
func getrext() {

	if (ismembrane("extracellular")) {

		forsec $s1 return 1/xg[0]
	}
}
// --------------------------------------------------------------------------------



// -------------------------------getlambda----------------------------------------
// takes (1) secname
// outputs average lambda along secname (cm)
func getlambda() {

	return sqrt(1/(getg($s1) * getr($s1) * (1e6)))
}
// --------------------------------------------------------------------------------



// -------------------------------getRinf----------------------------------------
// takes (1) secname
// outputs average input resistance at secname for semi-infinite cable (ohm)
func getRinf() {

	// see Rall 1977.
	return (1/getg($s1))/(getlambda($s1))
}
// --------------------------------------------------------------------------------



/// --------------------------------------------------------------------------------
func getmaxev() {

	if (numarg() == 1 && argtype(1) == 2) {

		if (!strcmp($s1, "help")) {

			print "Enter:"
			print "1) iamp (nA)"
			print "output: maximum expected voltage at stimulus location given provided iamp and already set stimulus location and duration"
			stop
		}
	}

	// see Rall 1977, eq. 4.23.
	return $1 * (1e-6) * getRinf(secstim) * erf(sqrt(stim.dur/gettau(secstim)))
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
func getev() {

	if (numarg() == 1 && argtype(1) == 2) {

		if (!strcmp($s1, "help")) {

			print "Enter:"
			print "1) iamp (nA)"
			print "2) desired section name, i.e. \"soma\""
			print "3) location of desired section name (0-1)"
			print "output: expected maximum voltage at desired section and location, given provided iamp and already set stimulus location and duration"
			stop
		}
	}	

	return getmaxev($1) * exp((-getdist(secstim, getsubloc(locstim), $s2, $3)*(1e-4))/getlambda($s2))
}
// --------------------------------------------------------------------------------



// -----------------------------getmaxrecori---------------------------------------
// takes no argument. requires a seticlamp and recloclist.count > 0.
// outputs orientation of maxrecdist section
func getmaxrecori() {local k, dist_, num

	maxrecdist = getmaxrecdist()
	maxsecori = -1

	for k = 0, recseclist.count-1 {
		
		sscanf(sublocstim, "%lf", &num)
		forsec secstim distance(0, num)
		
		sscanf(subloclist.o(k).label, "%lf", &num)
		forsec recseclist.o(k).label dist_ = distance(num)
		
		if (dist_ == maxrecdist) {
			forsec recseclist.o(k).label maxsecori = section_orientation()
		}
	}

	return maxsecori
}
// --------------------------------------------------------------------------------



// ------------------------------getcellori----------------------------------------
// takes no argument. requires a 3D soma.
// outputs orientation of cell: 0 if horizontal (+45,-45), 1 if vertical (+45,+135)
// vertical if  pi/4 (45) to 3pi/4 (135) and (pos side) 5pi/4 to 7pi/4
// no need to take negative side into account as norm only
func getcellori() {local x1, y1, xn, yn, normx, normy, cellangle

	forsec "soma" {
	
		x1 = x3d(0)
		xn = x3d(n3d()-1)
		y1 = y3d(0)
		yn = y3d(n3d()-1)
	}

	normx = abs(x1-xn)
	normy = abs(y1-yn)

	cellangle = atan(normy/normx)

	if ((cellangle > 0.25*PI && cellangle < 0.75*PI) || (cellangle > 1.25*PI && cellangle < 1.75*PI)) {

		return 1
	
	} else {

		return 0
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
obfunc p2pnorm() {local p, i localobj tempvec

	getplow()

	if (numarg() == 1) {

		if (argtype(1) == 1) {

			for p = 0, $o1.size-1 {

				$o1.x[p] /= plowvec.x[p]
			}

			return $o1
		}
	}

	if (numarg() == plowvec.size) {

		tempvec = new Vector(plowvec.size)

		for i = 1, numarg() {

			tempvec.x[i-1] = $i/plowvec.x[i-1]
		}

		return tempvec
	}

	if (!numarg()) {

		tempvec = new Vector(plowvec.size)

		for p = 0, pnamelist.count-1 {

			sprint(tempstr, "%s%s", "num = ", pnamelist.o(p).label)
			execute(tempstr)
			tempvec.x[p] = num/plowvec.x[p]
		}

		return tempvec
	}
}
// --------------------------------------------------------------------------------



// -------------------------------getpifdel----------------------------------------
func getpifdel() {local fdel, pifdel

	// fit delay to fit start time post-injection on the injecting pipette's recording
	// see methods for details. Units = ms.
	if (mode_ == 0) {

		fdel = 0.5
		pifdel = stim.del + stim.dur + fdel			
	
	} else if (mode_ == 1) {

		pifdel = 0
	}

	// delay to post-injection fit start
	return pifdel
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
proc write_modeltype() {

	sprint(modstrtype, "%s", "")
	sprint(modstrtype, "%s%s%s%s%s%s", celltype, "-", modeltypestr, "-", axontypestr, ".type")

	if (chkdir(root, ".type\n")) {

		if (!chkdir(root, modstrtype)) {

			sprint(tempstr, "%s%s", "mv -f *.type ", modstrtype)
			sysdir(root, tempstr)
		}

	} else {

		writestr(root, modstrtype)
	}
	sprint(tempstr, "%s", "")	
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
func getmod() {

	sprint(modstr, "%s%s%s", modeltypestr, "-", axontypestr)
	sprint(moddir, "%s%s%s", out, modstr, "/")

	if (chkdir(out, modstr)) {

		return 1
	
	} else {

		return 0
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
func getiampind() {

	if (numarg() == 1 && argtype(1) == 2) {

		if (!strcmp($s1, "help")) {

			print "Enter:"
			print "1) injection amplitude of interest (nA)"
			print "output: that address within iampvec, if it exists. Else -1."
			stop
		}
	}

	if (iampvec.contains($1)) {

		return iampvec.indwhere("==", $1)
	
	} else {

		return -1
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
proc getiamp() {local amplitude

	if (numarg() == 1 && argtype(1) == 2) {

		if (!strcmp($s1, "help")) {

			print "Enter:"
			print "1) Enter iamp address within iampvec (optional). If unknown, use getiampind(iamp) [iamp in nA]."
			print "Default: currently set iamp."
			print "2) an iamp string, into which the iamp will be printed [nA or pA, depending on whichever is appropriate]."
			print "Default: given or currently set iamp is printed into iampstr."
			stop
		}
	}

	if (numarg() && argtype(1) == 0) {

		amplitude = iampvec.x[$1]

	} else {

		amplitude = setnsig(stim.amp, 3)
	}

	if (amplitude < 1 && amplitude > -1) {

		amplitude *= 1e3

		if (amplitude >= float_epsilon) {

			sprint(iampstr, "%s%g%s", "+", amplitude, "pA")

			if (numarg() == 1 && argtype(1) == 2) {
			
				sprint($s1, "%s%g%s", "+", amplitude, "pA")				

			} else if (numarg() == 2 && argtype(1) == 0 && argtype(2) == 2) {

				sprint($s2, "%s%g%s", "+", amplitude, "pA")
			}
		
		} else {

			sprint(iampstr, "%g%s", amplitude, "pA")

			if (numarg() == 1 && argtype(1) == 2) {
			
				sprint($s1, "%g%s", amplitude, "pA")				

			} else if (numarg() == 2 && argtype(1) == 0 && argtype(2) == 2) {

				sprint($s2, "%g%s", amplitude, "pA")
			}
		}
	
	} else {

		if (amplitude >= 1) {

			sprint(iampstr, "%s%g%s", "+", amplitude, "nA")
			
			if (numarg() == 1 && argtype(1) == 2) {
			
				sprint($s1, "%s%g%s", "+", amplitude, "nA")				

			} else if (numarg() == 2 && argtype(1) == 0 && argtype(2) == 2) {

				sprint($s2, "%s%g%s", "+", amplitude, "nA")
			}
		
		} else if (amplitude <= -1) {

			sprint(iampstr, "%g%s", amplitude, "nA")

			if (numarg() == 1 && argtype(1) == 2) {

				sprint($s1, "%g%s", amplitude, "nA")				

			} else if (numarg() == 2 && argtype(1) == 0 && argtype(2) == 2) {

				sprint($s2, "%g%s", amplitude, "nA")
			}
		}
	}
}
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
func getiampdir() {

	if (numarg() == 1 && argtype(1) == 2) {

		if (!strcmp($s1, "help")) {

			print "Enter:"
			print "1) iamp address within iampvec (optional). Default: currently set iamp from iampvec."
			print "May also use getiampind(iamp) [enter the iamp in nA]."
			print "2) An iamp string, into which will be printed the currently set injection amplitude (optional)"
			print "3) An iampdir string, into which the iamp directory will be printed (optional, but takes priority if only string argument entered). Default: selected or default iamp is printed into iampdir."
			stop
		}
	}
	
	getmod()

	strdef chkstr

	if (!numarg()) {

		getiamp()
		sprint(iampdir, "%s%s%s", moddir, iampstr, "/")
		
		sprint(chkstr, iampstr)
	
	} else if (numarg() == 1 && argtype(1) == 2) {

		getiamp()
		sprint($s1, "%s%s%s", moddir, iampstr, "/")

		sprint(chkstr, iampstr)

	} else if (numarg() == 1 && argtype(1) == 0) {

		getiamp($1)
		sprint(iampdir, "%s%s%s", moddir, iampstr, "/")

		sprint(chkstr, iampstr)

	} else if (numarg() == 2 && argtype(1) == 2 && argtype(2) == 2) {

		getiamp($s1)
		sprint($s2, "%s%s%s", moddir, $s1, "/")

		sprint(chkstr, iampstr)		

	} else if (numarg() == 2 && argtype(1) == 0 && argtype(2) == 2) {

		getiamp($1)
		sprint($s2, "%s%s%s", moddir, iampstr, "/")

		sprint(chkstr, iampstr)
	
	} else if (numarg() == 3 && argtype(1) == 0 && argtype(2) == 2 && argtype(3) == 2) {

		getiamp($1, $s2)
		sprint($s3, "%s%s%s", moddir, $s2, "/")

		sprint(chkstr, $s2)
	}

	if (chkdir(moddir, chkstr)) {

		return 1
	
	} else {

		return 0
	}	
}
// --------------------------------------------------------------------------------



// --------------------------------nint--------------------------------------------
proc nint() {

	print "Number of internodes: ", crintlist()
}
// --------------------------------------------------------------------------------
