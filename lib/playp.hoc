// Salto
// (c) Charles CH Cohen, 2014-present
// this software is released to the public under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
// International license (CC BY-NC-ND 4.0, in English).
// for any questions, please email c.cohen@gmx.com



// -------------------------------------Variables-----------------------------------------
objref playbox, playvec, playlist, playveclist

strdef playstr
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
proc setplay() {local k, iamp, iampind localobj tempmat

	playbox = new VBox(3)
	playbox.intercept(1)
	
	xpanel("")
	xlabel("Play optimal parameters")
	xpanel()

	xpanel("")
	xlabel("Select injection amplitude:")	

	getmod()
	dirlist = getdirlist(moddir, dirlist)

	if (dirlist.count) {
		
		playvec = new Vector(dirlist.count)
		playlist = new List()
		crveclist(dirlist.count, playveclist)

		for k = 0, dirlist.count-1 {

			sprint(tempdir, "%s%s%s", moddir, dirlist.o(k).label, "/")

			if (chkdir(tempdir, "pmatr.dat")) {

				getmat(tempdir, "pmatr.dat", tempmat)
				
			} else {

				getmat(tempdir, "pmatr-all.dat", tempmat)
			}

			playlist.append(tempmat)
			playveclist.o(k).resize(tempmat.nrow)
			playveclist.o(k).label(tempdir)

			sscanf(dirlist.o(k).label, "%lf", &iamp)
			iampind = getiampind(iamp)

			sprint(playstr, "%s%d%s%d%s", "playopt(", k, ", ", iampind, ")")
			xcheckbox(dirlist.o(k).label, &playvec.x[k], playstr)
		}
	}

	xpanel()

	xpanel("")
	xpanel()

	playbox.intercept(0)
	playbox.map("Play Opt", 341, 629, 302.4, 251.52)
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
proc playopt() {local m, input_row, end_row

	if (numarg() > 2) {

		playvec.x[$1] = 1
	}

	while (playvec.x[$1]) {

		reseticlamp($2, 1)

		print "\nPlaying optimization results from:"
		print playveclist.o($1).label, "\n"

		if (numarg() < 3) {

			input_row = 0
			end_row = playlist.o($1).nrow-1

		} else {

			input_row = $3
			end_row = input_row
		}

		for m = input_row, end_row {

			if (playvec.x[$1]) {

				if (!playveclist.o($1).x[m]) {

					print "Playing simulation ", m, "of ", playlist.o($1).nrow-1
					updfitparam(playlist.o($1).getrow(m))
					
					nopelog()
					FitnessGenerator[0].efun()
					pelog()

					playveclist.o($1).x[m] = 1
				}
			
			} else {

				print "Play paused...\n"
				break
			}
		}

		if (playveclist.o($1).sum == playveclist.o($1).size) {			

			for m = 0, playveclist.o($1).size-1 {

				playveclist.o($1).x[m] = 0
			}

			playvec.x[$1] = 0
		}

		if (numarg() > 2) {

			playvec.x[$1] = 0
		}
	}
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
proc run() {

	running_ = 1
	stdinit()
	continuerun(tstop)

	if (stoprun) {

		stoprun = 0
	}
}
// ---------------------------------------------------------------------------------------
