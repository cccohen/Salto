// Salto
// (c) Charles CH Cohen, 2014-present
// this software is released to the public under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
// International license (CC BY-NC-ND 4.0, in English).
// for any questions, please email c.cohen@gmx.com



//---------------------Parameter definitions and initial values---------------------
// Define and set initial (expected) values for each parameter, as well as upper and 
// lower bounds.
// ---------------------------------------------------------------------------------



// ---------------------Non-optimized or fixed parameters---------------------------
// Extracellular space axial resistance (rext). Unit = Mega ohm / cm. Fixed.
// Based on Ri_low and the cross-sectional area of the extracellular bath space 
// (sphere 4 cm in diameter).
rext = 1e-6
// -------------------------------Batteries-----------------------------------------
// Intracellular voltage gradient powering bioelectric cells. Average, with respect 
// to extracellular space adjacent to each recording site. Dependent upon uploaded 
// voltge recording data. Units = mV.
v_init = getRMP()
// The extracellular battery. eext is fixed.
eext = 0
// ---------------------------------------------------------------------------------
// Intra-pipette axial resistivity, calculated as bridge balance of the electrode 
// factored by the ratio between the total cross-sectional area to length of the
// modellled pipette tip. Since bridge balance may vary between electrodes, this is
// determined individually for each cell based on the bridge balance entered at setup.
// ---------------------------------------------------------------------------------
// Specific surface capacitance of extracellular space, Cext (unit = ohm cm^2).
// Counterpart to Rext. Fixed.
Cext = 0
// ----------------------------Axial resistance-------------------------------------
// Intracellular axial resistivity, or Ri. Unit = ohm cm.
Ri_def = 200
// from estimated resistivity of mammalian cerebrospinal fluid at 35 C
// (Fenstermacher et al. 1970).
Ri_low = 50
// based on highest measured intracellular resistivity (Major et al. 1994).
Ri_high = 400
// ---------------------------------------------------------------------------------
// Periaxonal axial resistance, or rpa. This refers to the submyelin, extra-
// axonal resistance. Unit = Mega ohm / cm.
rpa_def = 1e5
// rpa_low
// rpa_low = 5e3
rpa_low = 6e4
// rpa_high
rpa_high = 2.5e7
// ----------------------------Paranodal factors------------------------------------
// average paranodal delta estimated from Rosenbluth et al 2013 (nm)
paradelta = 2.6
// consequent rpafact, or factor for rpa at paranodes given paradelta (eq. 5)
parafact_def = 4.7
parafact_low = 1
parafact_high = 100
// ---------------------------Membrane resistance-----------------------------------
// Cellular membrane specific resistance, Rm. Refers to the ions flowing through 
// passive membrane leak channels. Unit = ohm cm^2.
Rm_def = 25000
// Based on lowest estimated Rm for oligodendrocytes (Bakiri et al. 2011, Chan et al. 2013)
Rm_low = 2e3
// Based on Alle and Geiger 2006.
Rm_high = 6e4
// ---------------------------------------------------------------------------------
// Myelin sheath specific resistance. Unit = ohm cm^2
Rmy_def = 1e5
// Based on a minimum of 10 myelin membranes at 2 kOhm cm2, the lowest reported
// membrane resistance in precursor and mature oligos (Chan et al. 2013 and Bakiri
// et al. 2011)
Rmy_low = 20000
// Based on a maximum of 100 myelin membranes at highest estimated Rmm (Bakiri et al. 2011).
Rmy_high = 1.6e6
// ---------------------------------------------------------------------------------
// Specific surface resistance of extracellular space, Rext (unit = ohm cm^2). Based 
// on Ri_low converted to surface units. Dependent upon local surface area 
// enveloping neuronal processes (~10^-6 cm^2) and length (10^-2 cm).
Rext = 1e-8
// ---------------------------------------------------------------------------------
// Pipette surface specific resistance. Based on the resistive properties of 
// the borosilicate glass used (see methods and Ehrt 2009). Fixed.
Rpip = 5e10
// ---------------------------Membrane capacitance----------------------------------
// Neural membrane specific capacitance. Unit = uF / cm^2.
Cm_def = 1
// Based on some of the lowest estimated values for Cm 
// (Major et al. 1994 or Eyal et al. 2016)
Cm_low = 0.5
// Refers to one of the highest estimated values for Cm (Rapp et al. 1994)
Cm_high = 2
// ---------------------------------------------------------------------------------
// Myelin sheath specific capacitance. Unit = uF / cm^2.
Cmy_def = 0.05
// Based on a maximum of 100 myelin membranes at Cm_low.
Cmy_low = 0.005
// Based on minimum of 1 myelin membrane at Cm_high
Cmy_high = 0.2
// ---------------------------------------------------------------------------------
// Specific surface capacitance of extracellular space, Cext (unit = ohm cm^2).
// Counterpart to Rext. Fixed.
Cext = 0
// ---------------------------------------------------------------------------------
// Specific surface capacitance of borosilicate glass patch pipettes. Pipettes will
// be modelled directly, like cellular compartments, to account for their
// electrotonic contribution in passive, subthreshold recordings (Roth and Hausser 
// 2001). Even in well-compensated settings, pipette capacitance can have a small
// effect on the cellular response (Major et al. 1994). Therefore, in addition 
// to creating morphologically and biophysically accurate pipette tips (see methods), 
// leftover pipette capacitance will be optimized out, to parse it from cellular 
// capacitances. Moreover, pipette capacitance may be on the order of myelin sheath 
// capacitance (See Methods of Cohen et al. 2020). Since pipette artifacts are 
// primarily from the injecting recording electrode, only that pipette's capacitance 
// will be optimized out. Unit = uF / cm^2.
Cpip_def = 1.29e-6
Cpip_low = 1.29e-8
Cpip_high = 1.29e-4
// ------------------------------Alternatives---------------------------------------
// Alternative implementations of some axonal parameters to robustly test the single
// cable. Available options include:
// RmNode: a separate nodal membrane resistance parameter, to account for possibly
// very low nodal membrane resistance (Tasaki 1955), or membrane channel blockers
// possibly not fully blocking nodal membranes.
// RmAxon: a separate axonal membrane resistance (no expected basis)
// RmInt: a separate internodal axon membrane resistance, to account for bath-applied
// membrane channel blockers possibly not reaching under the myelin.
// RiAxon: a separate intra-axonal resistivity parameter (no biophysical basis)
RmN_def = Rm_def
RmN_low = Rm_low
RmN_high = Rm_high

RmA_def = Rm_def
RmA_low = Rm_low
RmA_high = Rm_high

RmI_def = Rm_def
RmI_low = Rm_low
RmI_high = Rm_high

RiA_def = Ri_def
RiA_low = Ri_low
RiA_high = Ri_high

exp_doarg = 0

RmN_doarg = 0
RmN_uselog = 0

RmA_doarg = 0
RmA_uselog = 0

RmI_doarg = 0
RmI_uselog = 0

per_int_doarg = 0

RiA_doarg = 0
RiA_uselog = 0
// ---------------------------------------------------------------------------------
// --------------------------Sodium channels----------------------------------------
// Na channel expression. Units pS/cm2.
Na_so_low = 0.001
Na_so_high = 2000
Na_so_def = 800

lc_Na_de_low = 20
lc_Na_de_high = 600
lc_Na_de_def = 100

Na_prox_low = 0.001
Na_prox_high = 75000
Na_prox_def = 2500

Na_ais_low = 0.001
Na_ais_high = 75000
Na_ais_def = 10000

Na_int_low = 0.001
Na_int_high = 1000
Na_int_def = 100

Na_nod_low = 0.001
Na_nod_high = 75000
Na_nod_def = 10000

Na_end_low = 0.001
Na_end_high = 75000
Na_end_def = 400

Na_col_low = 0.001
Na_col_high = 1000
Na_col_def = 200

Nap_ais_low = 1e-6
Nap_ais_high = 100
Nap_ais_def = 1

Nap_int_low = 1e-6
Nap_int_high = 10
Nap_int_def = 1e-2

Nap_nod_low = 1e-6
Nap_nod_high = 1000
Nap_nod_def = 1

Nap_end_low = 1e-6
Nap_end_high = 100
Nap_end_def = 1e-1
// -------------------------Potassium channels--------------------------------------
// Potassium channel expression. Units pS/cm2.
Kv1_so_low = 0.001
Kv1_so_high = 2000
Kv1_so_def = 100

lc_Kv_Kv1_de_low = 20
lc_Kv_Kv1_de_high = 2000
lc_Kv_Kv1_de_def = 200

Kv1_prox_low = 0.001
Kv1_prox_high = 20000
Kv1_prox_def = 500

Kv1_ais_low = 0.001
Kv1_ais_high = 20000
Kv1_ais_def = 3000

Kv1_juxta_low = 0.001
Kv1_juxta_high = 20000
Kv1_juxta_def = 2000

Kv1_int_low = 0.001
Kv1_int_high = 2000
Kv1_int_def = 400

Kv1_nod_low = 0.001
Kv1_nod_high = 2000
Kv1_nod_def = 200

Kv1_end_low = 0.001
Kv1_end_high = 20000
Kv1_end_def = 400

Kv1_col_low = 0.001
Kv1_col_high = 2000
Kv1_col_def = 200

// also known as Kv_slow
Kv_so_low = 0.001
Kv_so_high = 200
Kv_so_def = 20

Kv7_de_low = 0.001
Kv7_de_high = 200
Kv7_de_def = 15

Kv7_so_low = 0.001
Kv7_so_high = 200
Kv7_so_def = 25

Kv7_prox_low = 0.001
Kv7_prox_high = 2600
Kv7_prox_def = 120

Kv7_ais_low = 0.001
Kv7_ais_high = 2600
Kv7_ais_def = 160

Kv7_int_low = 0.001
Kv7_int_high = 200
Kv7_int_def = 5

Kv7_nod_low = 0.001
Kv7_nod_high = 2600
Kv7_nod_def = 160

Kv7_end_low = 0.001
Kv7_end_high = 2600
Kv7_end_def = 5

Kv7_col_low = 0.001
Kv7_col_high = 200
Kv7_col_def = 5

KCa_low = 0.001
KCa_high = 100
KCa_def = 2
// ---------------------------Calcium channels--------------------------------------
// Calcium channel expression. Units pS/cm2.
Ca_low = 0.001
Ca_high = 100
Ca_def = 3

It2_low = Ca_low
It2_high = Ca_high
It2_def = Ca_def
// ------------------------------H channels-----------------------------------------
H_so_def = 1e-4	
H_so_low = 1e-6
H_so_high = 1e-2

tc_H_de_def = 2.5e-3
tc_H_de_low = 1e-3
tc_H_de_high = 8e-3

H_ax_def = 1e-4
H_ax_low = H_so_low
H_ax_high = H_so_high
// ---------------------------Misc constants----------------------------------------
vShift_na = 12
vShift_nais = 12
vShift_nax = 12
vShift_kv1ax = 10

vShift_inact_na = 10
vShift_inact_nais = 10
vShift_inact_nax = 10
vShift_inact_kv1ax = -15

maxrate_na = 8000
maxrate_nais = 8000
maxrate_nax = 8000

// fixed to 23, but adjusted for to temprec = celsius in relevant mod files
temp_na = 23
temp_nais = 23
temp_nax = 23

q10_na = 2.3
q10_nais = 2.3
q10_nax = 2.3

q10h_na = 2.3
q10h_nais = 2.3
q10h_nax = 2.3
// ---------------------------------------------------------------------------------
// preAIS_border_percentage (prior to large rise in Na and K channel expression) determined according to
// Battefeld et al. (2014), Hamada and Kole (2015), and Hamada et al. (2016). Midpoint percentage 
// (midpoint of Gaussian) for AIS distributions of Na based on Battefeld et al. (2014),
// similar to Hallerman et al. (2012). Kv1 according to Kole and Stuart (2012), similar to Hallerman et al.
// (2012). Kv7, Battefeld et al. (2014).
preAIS_border_percentage = 0.1
Nais_midpoint_percentage = ((1-preAIS_border_percentage)/2)+preAIS_border_percentage
Kv1_ais_midpoint_percentage = 0.4
Kv7_ais_midpoint_percentage = 0.5
// --------------------------Simulation order---------------------------------------
// For determining integration method. default is 0. 1 and 2 also available.
// Check NEURON documentation for details.
order = 0
// ---------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------
proc defparam() {

	// ---------------------------Optimized parameters----------------------------------
	// ----------------------------Axial resistance-------------------------------------
	// The initial value is set to the default
	Ri = Ri_def
	// norm values
	Ri_norm_def = Ri_def/Ri_low
	Ri_norm = Ri/Ri_low
	Ri_low_norm = Ri_low/Ri_low
	Ri_high_norm = Ri_high/Ri_low
	// ---------------------------------------------------------------------------------
	// initial value
	rpa = rpa_def
	// norm values
	rpa_norm_def = rpa_def/rpa_low
	rpa_norm = rpa/rpa_low
	rpa_low_norm = rpa_low/rpa_low
	rpa_high_norm = rpa_high/rpa_low
	// ---------------------------Membrane resistance-----------------------------------
	// initial value
	Rm = Rm_def
	// norm values
	Rm_norm_def = Rm_def/Rm_low
	Rm_norm = Rm/Rm_low
	Rm_low_norm = Rm_low/Rm_low
	Rm_high_norm = Rm_high/Rm_low
	// ---------------------------------------------------------------------------------
	// initial value
	Rmy = Rmy_def
	// norm values
	Rmy_norm_def = Rmy_def/Rmy_low
	Rmy_norm = Rmy/Rmy_low
	Rmy_low_norm = Rmy_low/Rmy_low
	Rmy_high_norm = Rmy_high/Rmy_low
	// ---------------------------Membrane capacitance----------------------------------
	// initial value
	Cm = Cm_def
	// norm values
	Cm_norm_def = Cm_def/Cm_low
	Cm_norm = Cm/Cm_low
	Cm_low_norm = Cm_low/Cm_low
	Cm_high_norm = Cm_high/Cm_low
	// ---------------------------------------------------------------------------------
	// initial value
	Cmy = Cmy_def
	// norm values
	Cmy_norm_def = Cmy_def/Cmy_low
	Cmy_norm = Cmy/Cmy_low
	Cmy_low_norm = Cmy_low/Cmy_low
	Cmy_high_norm = Cmy_high/Cmy_low
	// ---------------------------------------------------------------------------------
	// initial value
	Cpip = Cpip_def
	// norm values
	Cpip_norm_def = Cpip_def/Cpip_low
	Cpip_norm = Cpip/Cpip_low
	Cpip_low_norm = Cpip_low/Cpip_low
	Cpip_high_norm = Cpip_high/Cpip_low
	// ----------------------------Paranodal factors------------------------------------
	parafact = parafact_def
	// norm values
	parafact_norm_def = parafact_def/parafact_low
	parafact_norm = parafact/parafact_low
	parafact_low_norm = parafact_low/parafact_low
	parafact_high_norm = parafact_high/parafact_low
	// ------------------------------Alternatives---------------------------------------
	RmN = RmN_def
	RmN_norm_def = RmN_def/RmN_low
	RmN_norm = RmN/RmN_low
	RmN_low_norm = RmN_low/RmN_low
	RmN_high_norm = RmN_high/RmN_low
	
	RmA = RmA_def
	RmA_norm_def = RmA_def/RmA_low
	RmA_norm = RmA/RmA_low
	RmA_low_norm = RmA_low/RmA_low
	RmA_high_norm = RmA_high/RmA_low

	RmI = RmI_def
	RmI_norm_def = RmI_def/RmI_low
	RmI_norm = RmI/RmI_low
	RmI_low_norm = RmI_low/RmI_low
	RmI_high_norm = RmI_high/RmI_low

	RiA = RiA_def
	RiA_norm_def = RiA_def/RiA_low
	RiA_norm = RiA/RiA_low
	RiA_low_norm = RiA_low/RiA_low
	RiA_high_norm = RiA_high/RiA_low
	// ---------------------------------------------------------------------------------
	// --------------------------Sodium channels----------------------------------------
	// Na channel expression. Units pS/cm2.
	Na_so = Na_so_def
	Na_so_norm_def = Na_so_def/Na_so_low
	Na_so_norm = Na_so/Na_so_low
	Na_so_low_norm = Na_so_low/Na_so_low
	Na_so_high_norm = Na_so_high/Na_so_low

	lc_Na_de = lc_Na_de_def
	lc_Na_de_norm_def = lc_Na_de_def/lc_Na_de_low
	lc_Na_de_norm = lc_Na_de/lc_Na_de_low
	lc_Na_de_low_norm = lc_Na_de_low/lc_Na_de_low
	lc_Na_de_high_norm = lc_Na_de_high/lc_Na_de_low

	Na_prox = Na_prox_def
	Na_prox_norm_def = Na_prox_def/Na_prox_low
	Na_prox_norm = Na_prox/Na_prox_low
	Na_prox_low_norm = Na_prox/Na_prox_low
	Na_prox_high_norm = Na_prox_high/Na_prox_low

	Na_ais = Na_ais_def
	Na_ais_norm_def = Na_ais_def/Na_ais_low
	Na_ais_norm = Na_ais/Na_ais_low
	Na_ais_low_norm = Na_ais_low/Na_ais_low
	Na_ais_high_norm = Na_ais_high/Na_ais_low

	Na_int = Na_int_def
	Na_int_norm_def = Na_int_def/Na_int_low
	Na_int_norm = Na_int/Na_int_low
	Na_int_low_norm = Na_int_low/Na_int_low
	Na_int_high_norm = Na_int_high/Na_int_low

	Na_nod = Na_ais
	Na_nod_norm_def = Na_nod_def/Na_nod_low
	Na_nod_norm = Na_nod/Na_nod_low
	Na_nod_low_norm = Na_nod_low/Na_nod_low
	Na_nod_high_norm = Na_nod_high/Na_nod_low

	Na_end = Na_end_def
	Na_end_norm_def = Na_end_def/Na_end_low
	Na_end_norm = Na_end/Na_end_low
	Na_end_low_norm = Na_end_low/Na_end_low
	Na_end_high_norm = Na_end_high/Na_end_low

	Na_col = Na_col_def
	Na_col_norm_def = Na_col_def/Na_col_low
	Na_col_norm = Na_col/Na_col_low
	Na_col_low_norm = Na_col_low/Na_col_low
	Na_col_high_norm = Na_col_high/Na_col_low

	Nap_ais = Nap_ais_def
	Nap_ais_norm_def = Nap_ais_def/Nap_ais_low
	Nap_ais_norm = Nap_ais/Nap_ais_low
	Nap_ais_low_norm = Nap_ais_low/Nap_ais_low
	Nap_ais_high_norm = Nap_ais_high/Nap_ais_low

	Nap_int = Nap_int_def
	Nap_int_norm_def = Nap_int_def/Nap_int_low
	Nap_int_norm = Nap_int/Nap_int_low
	Nap_int_low_norm = Nap_int_low/Nap_int_low
	Nap_int_high_norm = Nap_int_high/Nap_int_low

	Nap_nod = Nap_nod_def
	Nap_nod_norm_def = Nap_nod_def/Nap_nod_low
	Nap_nod_norm = Nap_nod/Nap_nod_low
	Nap_nod_low_norm = Nap_nod_low/Nap_nod_low
	Nap_nod_high_norm = Nap_nod_high/Nap_nod_low

	Nap_end = Nap_end_def
	Nap_end_norm_def = Nap_end_def/Nap_end_low
	Nap_end_norm = Nap_end/Nap_end_low
	Nap_end_low_norm = Nap_end_low/Nap_end_low
	Nap_end_high_norm = Nap_end_high/Nap_end_low
	// -------------------------Potassium channels--------------------------------------
	Kv1_so = Kv1_so_def
	Kv1_so_norm_def = Kv1_so_def/Kv1_so_low
	Kv1_so_norm = Kv1_so/Kv1_so_low
	Kv1_so_low_norm = Kv1_so_low/Kv1_so_low
	Kv1_so_high_norm = Kv1_so_high/Kv1_so_low

	lc_Kv_Kv1_de = lc_Kv_Kv1_de_def
	lc_Kv_Kv1_de_norm_def = lc_Kv_Kv1_de_def/lc_Kv_Kv1_de_low
	lc_Kv_Kv1_de_norm = lc_Kv_Kv1_de/lc_Kv_Kv1_de_low
	lc_Kv_Kv1_de_low_norm = lc_Kv_Kv1_de_low/lc_Kv_Kv1_de_low
	lc_Kv_Kv1_de_high_norm = lc_Kv_Kv1_de_high/lc_Kv_Kv1_de_low

	Kv1_prox = Kv1_prox_def
	Kv1_prox_norm_def = Kv1_prox_def/Kv1_prox_low
	Kv1_prox_norm = Kv1_prox/Kv1_prox_low
	Kv1_prox_low_norm = Kv1_prox_low/Kv1_prox_low
	Kv1_prox_high_norm = Kv1_prox_high/Kv1_prox_low

	Kv1_ais = Kv1_ais_def
	Kv1_ais_norm_def = Kv1_ais_def/Kv1_ais_low
	Kv1_ais_norm = Kv1_ais/Kv1_ais_low
	Kv1_ais_low_norm = Kv1_ais_low/Kv1_ais_low
	Kv1_ais_high_norm = Kv1_ais_high/Kv1_ais_low

	Kv1_juxta = Kv1_juxta_def
	Kv1_juxta_norm_def = Kv1_juxta_def/Kv1_juxta_low
	Kv1_juxta_norm = Kv1_juxta/Kv1_juxta_low
	Kv1_juxta_low_norm = Kv1_juxta_low/Kv1_juxta_low
	Kv1_juxta_high_norm = Kv1_juxta_high/Kv1_juxta_low

	Kv1_int = Kv1_int_def
	Kv1_int_norm_def = Kv1_int_def/Kv1_int_low
	Kv1_int_norm = Kv1_int/Kv1_int_low
	Kv1_int_low_norm = Kv1_int_low/Kv1_int_low
	Kv1_int_high_norm = Kv1_int_high/Kv1_int_low

	Kv1_nod = Kv1_nod_def
	Kv1_nod_norm_def = Kv1_nod_def/Kv1_nod_low
	Kv1_nod_norm = Kv1_nod/Kv1_nod_low
	Kv1_nod_norm_low = Kv1_nod_low/Kv1_nod_low
	Kv1_nod_norm_high = Kv1_nod_high/Kv1_nod_low

	Kv1_end = Kv1_end_def
	Kv1_end_norm_def = Kv1_end_def/Kv1_end_low
	Kv1_end_norm = Kv1_end/Kv1_end_low
	Kv1_end_norm_low = Kv1_end_low/Kv1_end_low
	Kv1_end_norm_high = Kv1_end_high/Kv1_end_low

	Kv1_col = Kv1_col_def
	Kv1_col_norm_def = Kv1_col_def/Kv1_col_low
	Kv1_col_norm = Kv1_col/Kv1_col_low
	Kv1_col_norm_low = Kv1_col_low/Kv1_col_low
	Kv1_col_norm_high = Kv1_col_high/Kv1_col_low

	Kv_so = Kv_so_def
	Kv_so_norm_def = Kv_so_def/Kv_so_low
	Kv_so_norm = Kv_so/Kv_so_low
	Kv_so_norm_low = Kv_so_low/Kv_so_low
	Kv_so_norm_high = Kv_so_high/Kv_so_low

	Kv7_de = Kv7_de_def
	Kv7_de_norm_def = Kv7_de_def/Kv7_de_low
	Kv7_de_norm = Kv7_de/Kv7_de_low
	Kv7_de_norm_low = Kv7_de_low/Kv7_de_low
	Kv7_de_norm_high = Kv7_de_high/Kv7_de_low

	Kv7_so = Kv7_so_def
	Kv7_so_norm_def = Kv7_so_def/Kv7_so_low
	Kv7_so_norm = Kv7_so/Kv7_so_low
	Kv7_so_norm_low = Kv7_so_low/Kv7_so_low
	Kv7_so_norm_high = Kv7_so_high/Kv7_so_low

	Kv7_prox = Kv7_prox_def
	Kv7_prox_norm_def = Kv7_prox_def/Kv7_prox_low
	Kv7_prox_norm = Kv7_prox/Kv7_prox_low
	Kv7_prox_norm_low = Kv7_prox_low/Kv7_prox_low
	Kv7_prox_norm_high = Kv7_prox_high/Kv7_prox_low

	Kv7_ais = Kv7_ais_def
	Kv7_ais_norm_def = Kv7_ais_def/Kv7_ais_low
	Kv7_ais_norm = Kv7_ais/Kv7_ais_low
	Kv7_ais_norm_low = Kv7_ais_low/Kv7_ais_low
	Kv7_ais_norm_high = Kv7_ais_high/Kv7_ais_low

	Kv7_int = Kv7_int_def
	Kv7_int_norm_def = Kv7_int_def/Kv7_int_low
	Kv7_int_norm = Kv7_int/Kv7_int_low
	Kv7_int_norm_low = Kv7_int_low/Kv7_int_low
	Kv7_int_norm_high = Kv7_int_high/Kv7_int_low

	Kv7_nod = Kv7_nod_def
	Kv7_nod_norm_def = Kv7_nod_def/Kv7_nod_low
	Kv7_nod_norm = Kv7_nod/Kv7_nod_low
	Kv7_nod_norm_low = Kv7_nod_low/Kv7_nod_low
	Kv7_nod_norm_high = Kv7_nod_high/Kv7_nod_low

	Kv7_end = Kv7_end_def
	Kv7_end_norm_def = Kv7_end_def/Kv7_end_low
	Kv7_end_norm = Kv7_end/Kv7_end_low
	Kv7_end_norm_low = Kv7_end_low/Kv7_end_low
	Kv7_end_norm_high = Kv7_end_high/Kv7_end_low

	Kv7_col = Kv7_col_def
	Kv7_col_norm_def = Kv7_col_def/Kv7_col_low
	Kv7_col_norm = Kv7_col/Kv7_col_low
	Kv7_col_norm_low = Kv7_col_low/Kv7_col_low
	Kv7_col_norm_high = Kv7_col_high/Kv7_col_low

	KCa = KCa_def
	KCa_norm_def = KCa_def/KCa_low
	KCa_norm = KCa/KCa_low
	KCa_norm_low = KCa_low/KCa_low
	KCa_norm_high = KCa_high/KCa_low
	// ---------------------------Calcium channels--------------------------------------
	Ca = Ca_def
	Ca_norm_def = Ca_def/Ca_low
	Ca_norm = Ca/Ca_low
	Ca_norm_low = Ca_low/Ca_low
	Ca_norm_high = Ca_high/Ca_low

	It2 = It2_def
	It2_norm_def = It2_def/It2_low
	It2_norm = It2/It2_low
	It2_norm_low = It2_low/It2_low
	It2_norm_high = It2_high/It2_low
	// ------------------------------H channels-----------------------------------------
	H_so = H_so_def
	H_so_norm_def = H_so_def/H_so_low
	H_so_norm = H_so/H_so_low
	H_so_norm_low = H_so_low/H_so_low
	H_so_norm_high = H_so_high/H_so_low

	tc_H_de = tc_H_de_def
	tc_H_de_norm_def = tc_H_de_def/tc_H_de_low
	tc_H_de_norm = tc_H_de/tc_H_de_low
	tc_H_de_norm_low = tc_H_de_low/tc_H_de_low
	tc_H_de_norm_high = tc_H_de_high/tc_H_de_low

	H_ax = H_ax_def
	H_ax_norm_def = H_ax_def/H_ax_low
	H_ax_norm = H_so/H_ax_low
	H_ax_norm_low = H_ax_low/H_ax_low
	H_ax_norm_high = H_ax_high/H_ax_low
}
// ---------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------
// For AIS Gaussian-like NaCh distributions (see setparam distions())
proc defAISpts() {

	total_ais_length = 0
	forsec AIS total_ais_length += getdist(secname(), 0, secname(), 1)
	
	preAIS_border = preAIS_border_percentage * total_ais_length
	Nais_midpoint = Nais_midpoint_percentage * total_ais_length
	a_nais_Gaussian = 1
	b_nais_Gaussian = Nais_midpoint_percentage * total_ais_length
	FWHM_nais_Gaussian = (total_ais_length * (1-preAIS_border_percentage))/2
	c_nais_Gaussian = FWHM_nais_Gaussian/(2*sqrt(2*log(2)))
	
	Kv1_ais_midpoint = Kv1_ais_midpoint_percentage * total_ais_length
	Kv7_ais_midpoint = Kv7_ais_midpoint_percentage * total_ais_length
	
	ais_length = total_ais_length - preAIS_border
}
// ---------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------
proc initperint() {local numint, k

	numint = crintlist()

	for k = 1, numint {
		
		sprint(tempstr, "%s%d%s", "Rmy_", k, "_def = Rmy_def")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Rmy_", k, " = Rmy")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Rmy_", k, "_low = Rmy_low")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Rmy_", k, "_high = Rmy_high")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Rmy_", k, "_norm_def = Rmy_norm_def")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Rmy_", k, "_norm = Rmy_norm")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Rmy_", k, "_low_norm = Rmy_low_norm")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Rmy_", k, "_high_norm = Rmy_high_norm")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Rmy_", k, "_doarg = 1")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Rmy_", k, "_uselog = 1")
		execute(tempstr)

		sprint(tempstr, "%s%d%s", "Cmy_", k, "_def = Cmy_def")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Cmy_", k, " = Cmy")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Cmy_", k, "_low = Cmy_low")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Cmy_", k, "_high = Cmy_high")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Cmy_", k, "_norm_def = Cmy_norm_def")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Cmy_", k, "_norm = Cmy_norm")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Cmy_", k, "_low_norm = Cmy_low_norm")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Cmy_", k, "_high_norm = Cmy_high_norm")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Cmy_", k, "_doarg = 1")
		execute(tempstr)
		sprint(tempstr, "%s%d%s", "Cmy_", k, "_uselog = 1")
		execute(tempstr)
	}
}
// ---------------------------------------------------------------------------------
