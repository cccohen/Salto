// Salto
// (c) Charles CH Cohen, 2014-present
// this software is released to the public under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
// International license (CC BY-NC-ND 4.0, in English).
// for any questions, please email c.cohen@gmx.com



// -------------------------------------Variables-----------------------------------------
objref rpmat, uoptvec

// Maximum number of simulations on a given supercomputer at a given time
// Comet and Stampede2 RAM allocations force a maximum number of 2^12 simulations.
// Expanse enforces a maximum number of 2^12 cores per job.
simax = 4096

// ucounter, the tracker for unfinished optimizations
ucounter = 0
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
// function which organizes NU/evolutionary optimizations. Called by parallex.

// $1 = iiamp (= k)
// $2 = mode_
// $3 = ll
// $4 = uopt
// $o5 = p from pmat
// $o6 = eqvec from eqlist
// $o7 = pqvec from pqlist
// $8 = sim
// $9 = scount
// $o10 = exitlist vec
// $o11 = simulation cycle (time) vector.
// $12 (extra argument) = hoc_ac_, a unique optimization id variable
// $13 (extra argument) = ucount, a local variable determining if simulation could not finish due to lack of time
// $14 (extra argument) = exit_case, by default 0 (no exit) unless certain criteria are met (see optimize())

func orgopt() {local tolopt, maxstepsizeopt, ind, lastsim, p, ucount, exit_case

	// pelog needs to occur before calls to change weight, which call efun(), which calls init()
	// which calls upd/savepelog(), which uses the pelog labels to identify whether and which sim is operating.
	// pelog() only sets log vector labels.
	// the full simulation number includes the cycle number, i.e. how many x-hour cycles are being run for simulation y.
	// represented as sim = y.x
	ind = indwherelast($o11, ">", float_epsilon)+1
	
	sprint(tempstr, "%d%s%d", $8, ".", ind)
	pelog(tempstr, tempstr)
	
	getiamp($1, iampstr)
	print "\nRunning simulation ", $8+1, "of ", $9+1, "for injection amplitude ", iampstr

	reseticlamp(mode_, idata, $1, 0, !$3)
	tolopt = settol($1, !$3)
	maxstepsizeopt = setmaxstepsize(tolopt)

	if ($2 == 1) {

		adj_weight()

		// exit case fast sim finished, start slow
		if ($o10.x[0] && !$o10.x[1]) {

			add_weight($2, idata)
		}		
	}

	adj_injbound($2, !$3)

	// assign fit parameters
	for p = 0, $o5.size-1 {

		RunFitParm[p].val = $o5.x[p]
	}

	initfit($2, idata)
	chkparambounds($2, idata)

	// ucount = 0 if simulation did not complete due to overtime
	ucount = 0
	// exit_case by default is 0 (= no exit), unless there is a reason to exit (=1)
	exit_case = 0

	// for simplicity, everything received by genopt is sent to optimize, in order
	optimize($1, $2, $3, $4, $o5, tolopt, maxstepsizeopt, $o6, $o7, $8, $9, $o10, $o11, hoc_ac_, ucount, exit_case)

	// the number of calls to genopt gets counted
	return 1
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
// The NU algorithm.

// Description: a "just-enough" approach to optimization, ideal 
// for unevenly distributed parameters, such as myelin over a primary axon, 
// or weakly-constrained parameters in general, due to intrinsic noise or
// other noise-generating factors.

// $1 = iiamp
// $2 = mode_
// $3 = ll
// $4 = uopt
// $o5 = p from pmat, to be optimized
// $6 = tol
// $7 = maxstepsize
// $o8 = eqvec from eqlist, to be updated with resultant quad errors
// $o9 = pqvec from pqlist, to be updated with resultant quad parameters
// $10 = sim
// $11 = scount
// $o12 = exitlist vec
// $o13 = simulation cycle (time) vector.
// $14 = hoc_ac_ = id, which genopt sends on its own to optimize
// $15 = ucount, local variable determining if simulation could not finish due to lack of time
// $16 = exit_case, by default 0 (no exit) unless certain criteria are met (see optimize())

proc optimize() {local p, f, k, q, tempnum, exite, exitp localobj vvec, boundvec, weightvec, tempvec, tempmat, tempxvec, temptvec

	// variable tracking whether optimize is running
	fitoff = 0
	// minimum nquad to be performed
	MulfitPraxWrap[1].nstep = 1
	// set attributes of praxis
	attr_praxis($6, $7, 0)
	// start optimization.
	MulRunFitter[0].prun()

	// exit strategy
	while (!fitoff) {
		
		// error, parameter, and voltage logging
		// error vec from eqlist is resized to accomodate the new resultant errors (+nf+1)
		$o8.resize($o8.size+nf+1)
		// prepare voltage vector
		vvec = new Vector()
		
		for f = 0, nf-1 {

			// save current time data
			temptvec = new Vector(RegionFitness[f].xdat.size)

			for k = 0, temptvec.size-1 {

				temptvec.x[k] = RegionFitness[f].xdat.x[k]
			}

			// save current bounded time data
			tempxvec = new Vector(RegionFitness[f].xdat_.size)

			for k = 0, tempxvec.size-1 {

				tempxvec.x[k] = RegionFitness[f].xdat_.x[k]
			}

			// save current boundaries
			boundvec = new Vector(RegionFitness[f].boundary.size)
			
			for k = 0, boundvec.size-1 {

				boundvec.x[k] = RegionFitness[f].boundary.x[k]
			}

			// save current weights
			weightvec = new Vector(RegionFitness[f].weight.size)
			
			for k = 0, weightvec.size-1 {

				weightvec.x[k] = RegionFitness[f].weight.x[k]
			}			

			// create new (default) boundaries
			RegionFitness[f].boundary = new Vector(2)
			
			RegionFitness[f].boundary.x[0] = temptvec.x[0]
			RegionFitness[f].boundary.x[1] = temptvec.x[temptvec.size-1]
			
			// set these new boundaries (must use different xdat vector)
			// use whole tdat
			RegionFitness[f].set_modelx(temptvec)
			
			nopelog()
			// generate error function
			FitnessGenerator[0].efun()
			pelog()

			// ensure FitnessGenerator[0].yveclist.o(f) is of the correct size (= RegionFitness[f].ydat_.size, the fit data, and 
			// RegionFitness[f].dw_.size, the weight placer). In theory, it should be set after the completion of efun(). In practice,
			// the call to meansqerr gets done before this update takes place. Therefore, the resize must be done here first.
			FitnessGenerator[0].yveclist.o(f).resize(temptvec.size)
			
			// store current default error in eqlist vec
			$o8.x[$o8.size-(nf+1)+f] = RegionFitness[f].ydat_.meansqerr(FitnessGenerator[0].yveclist.o(f), RegionFitness[f].dw_)
			$o8.x[$o8.size-1] += $o8.x[$o8.size-(nf+1)+f]

			// store current default-boundary voltage(s)			
			vvec.resize(vvec.size+FitnessGenerator[0].yveclist.o(f).size)

			for k = 0, FitnessGenerator[0].yveclist.o(f).size-1 {

				vvec.x[vvec.size - FitnessGenerator[0].yveclist.o(f).size + k] = FitnessGenerator[0].yveclist.o(f).x[k]
			}

			// restore original bounds and weights
			RegionFitness[f].boundary = new Vector(boundvec.size)

			for k = 0, RegionFitness[f].boundary.size-1 {

				RegionFitness[f].boundary.x[k] = boundvec.x[k]
			}
			
			RegionFitness[f].weight = new Vector(weightvec.size)

			for k = 0, RegionFitness[f].weight.size-1 {

				RegionFitness[f].weight.x[k] = weightvec.x[k]
			}
			
			// set these new boundaries and weights (must use different xdat vector)
			// use bounded tdat
			RegionFitness[f].set_modelx(tempxvec)

			// restore correct FitnessGenerator yveclist vector fit size
			FitnessGenerator[0].yveclist.o(f).resize(tempxvec.size)
		}

		// pqvec from pqlist is resized to accomodate the new resultant parameters (+getnp())
		$o9.resize($o9.size+getnp())

		for p = 0, getnp()-1 {

			$o9.x[$o9.size-getnp()+p] = RunFitParm[p].val
		}
		// ------------------------------------------------------------------------------------------------------------------------------------
		nefunvec.resize(nefunvec.size+1)
		nefunvec.x[nefunvec.size-1] = MulRunFitter[0].opt.nefun
		nefun_ = nefunvec.sum

		getiamp($1)

		// exit cases
		// overview of exitmat codes:
		// column 0: number of optimization type (currently 0 and 1)
		// column 1: whether optimization unfinished (0) or finished (1)
		// column 2: step-back (0 or 1)
		if (overtime) {

			print "\nCompleted simulation ", $10+1, "of ", $11+1, "at ", iampstr, " in ", setnsig(runtime/3600, 3), "hour(s)"
			print "Reason for exit: runtime is over set maximum of ", setnsig(maxtime/3600, 3), "hour(s) (simulation ", $10+1, "of ", $11+1, "at ", iampstr, ")"

			$15 = 1
			$16 = 1			

			$o12.x[1] = 0
			$o12.x[2] = 0
		
		} else {

			nquad_ += MulfitPraxWrap[1].nquad
			
			if (nquad_ < 3) {

				// If error is marginal, i.e. in the noise, or decreasing and in the noise, then exit.
				if ($o8.x[$o8.size-1] < $6) {					

					print "\nCompleted simulation ", $10+1, "of ", $11+1, "at ", iampstr, " in ", setnsig(runtime/3600, 3), "hour(s)"
					print "Reason for exit: error is below set threshold of ", $6, "mV^2 (simulation ", $10+1, "of ", $11+1, "at ", iampstr, ")"

					$16 = 1

					if (nquad_ == 1) {

						$o12.x[1] = 1
						$o12.x[2] = 0

					} else {

						if (abs(($o8.x[$o8.size-1] - $o8.x[$o8.size-1-(nf+1)]) >= $6)) {

							$o12.x[1] = 1
							$o12.x[2] = 0

						} else {

							// error differences are marginal, therefore step back 2.
							$o12.x[1] = 1
							$o12.x[2] = 1
						}
					}
				}
			
			} else {

				// If, after performing at least 3 quadratic searches, error improvement is decreasing and below tolerance, then exit. Step back is therefore 2.
				if ((abs($o8.x[$o8.size-1] - $o8.x[$o8.size-1-(nf+1)]) < $6) && (abs($o8.x[$o8.size-1-(nf+1)] - $o8.x[$o8.size-1-2*(nf+1)]) < $6)) {

					print "\nCompleted simulation ", $10+1, "of ", $11+1, "at ", iampstr, " in ", setnsig(runtime/3600, 3), "hour(s)"
					print "Reason for exit: error improvement is decreasing and below set threshold, or error is below set threshold of ", $6, "mV^2 (simulation ", $10+1, "of ", $11+1, "at ", iampstr, ")"

					$16 = 1

					$o12.x[1] = 1
					$o12.x[2] = 1
				
				} else {

					// no exit
					print "\nOngoing simulation ", $10+1, "of ", $11+1, "at ", iampstr, " nquad=", nquad_, "nefun=", nefun_, "time=", runtime, "e=", $o8.x[$o8.size-1]

					$o12.x[1] = 0
					$o12.x[2] = 0
				}
			}
		}

		if ($16) {

			exite = -($o12.x[2]+1)*(nf+1)-1
			exitp = -($o12.x[2]+1)*getnp()

			// increase the size of elog by 2 to cover the addition of tol and the exit code in the 2nd to and last positions, respectively.
			$o8.resize($o8.size+2)
			$o8.x[$o8.size-2] = $6
			// increase the size of pq by 1 to cover the addition of the exit code in the last position.
			$o9.resize($o9.size+1)
			// append exit codes
			$o8.x[$o8.size-1] = exite
			$o9.x[$o9.size-1] = exitp

			print "total (simulation ", $10+1, "of ", $11+1, "at ", iampstr, "): nquad=", nquad_, "nefun=", nefun_, "time=", runtime, "e=", $o8.x[$o8.size-1+$o8.x[$o8.size-1]+nf]

			// print optimized parameters
			print "Optimized parameters (simulation ", $10+1, "of ", $11+1, "at ", iampstr, "):"
			
			getplow()

			for p = 0, getnp()-1 {

				print pnamelist.o(p).label, "= ", setnsig($o9.x[$o9.size-1+$o9.x[$o9.size-1]+p]*plowvec.x[p], 3)
			}

			print "...end of optimized parameters (simulation ", $10+1, "of ", $11+1, "at ", iampstr, ")"

			// add simulation runtime to vvec
			vvec.resize(vvec.size+1)
			vvec.x[vvec.size-1] = runtime

			savepelog()

			if (getiampdir($1)) {

				// --------------------------eq---------------------------
				savelog(iampdir, "eq", $o8, vformvec, $10)
				// -------------------------------------------------------

				// --------------------------pq---------------------------
				savelog(iampdir, "pq", $o9, maxformvec, $10)
				// -------------------------------------------------------

				// ---------------------------e---------------------------
				tempvec = new Vector()

				for f = 0, nf {

					tempvec.resize(tempvec.size+1)
					tempvec.x[tempvec.size-1] = $o8.x[$o8.size-1+$o8.x[$o8.size-1]+f]
				}
	
				// tol
				tempvec.resize(tempvec.size+1)
				tempvec.x[tempvec.size-1] = $o8.x[$o8.size-2]

				savelog(iampdir, "fe", tempvec, vformvec, $10)
				// -------------------------------------------------------

				// ---------------------------p---------------------------
				tempvec = new Vector()
		
				for p = 0, getnp()-1 {

					tempvec.resize(tempvec.size+1)
					tempvec.x[p] = $o9.x[$o9.size-1+$o9.x[$o9.size-1]+p]
				}

				savelog(iampdir, "fp", tempvec, maxformvec, $10)
				// -------------------------------------------------------

				// ------------------------exit---------------------------
				savelog(iampdir, "exit", $o12, "%g\t", $10)
				// -------------------------------------------------------				

				// ---------------------------t---------------------------
				tempvec = new Vector()

				if ($o13.size) {

					tempvec.resize($o13.size+1)

					for k = 0, tempvec.size-2 {

						tempvec.x[k] = $o13.x[k]
					}
				
				} else {

					tempvec.resize(1)
				}
				
				tempvec.x[tempvec.size-1] = vvec.x[vvec.size-1]

				savelog(iampdir, "t", tempvec, tformvec, $10)

				vvec.resize(vvec.size-1)
				// -------------------------------------------------------

				// ---------------------------v---------------------------
				tempmat = new Matrix(RegionFitness[0].xdat.size, nf+1)
				tempmat.setcol(0, RegionFitness[0].xdat)

				for f = 0, nf-1 {

					for k = 0, tempmat.nrow-1 {

						tempmat.x[k][f+1] = vvec.x[k+f*tempmat.nrow]
					}
				}
				
				savelog(iampdir, "v", tempmat, vformvec, $10)
				// -------------------------------------------------------

				print "\nResults saved for simulation ", $10+1, "of ", $11+1, "at ", iampstr
			}

			// exit loop
			fitoff = 1
		
		} else {

			optimize($1, $2, $3, $4, $o5, $6, $7, $o8, $o9, $10, $11, $o12, $o13, $14, $15, $16)
		}
	}

	// send out uopt statistic
	data_out($14, $3, $15, $o12)
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
proc data_out() {

	if ($2) {

		llc.post($1, llc.pack($3, $o4))
	
	} else {

		ucounter += 1
	}
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
// procedure for mutating initial conditions.
// takes seed argument for rng and mode_.

proc mutate() {local p, sim

	rpmat = new Matrix(setgen(mode_, idata), genvec.size)

	sim = 0
	
	while (sim < rpmat.nrow) {

		for p = 0, spacemat.ncol-1 {

			// if mutmat.x[row sim][col p] => start (and therefore end) rows from which to pick prand range.
			rpmat.x[sim][p] = prand.uniform(spacemat.x[mutmat.x[sim][p]][p], spacemat.x[mutmat.x[sim][p]+1][p])
		}
		
		sim += 1
	}
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
// add the default simulation (def parameters) at row 0 and last column Cpip.
// implement fractional factorial design if proposed ns > simax

proc adj_rp() {local m, p, reduction_factor, mstart localobj tempmat, tempobj

	tempmat = new Matrix(rpmat.nrow+1, getnp())
	
	getpnormdef()
	
	for m = 0, tempmat.nrow-1 {

		tempmat.setrow(m, pnormdefvec)
	}
	
	if (solnvec.size) {

		for m = 0, tempmat.nrow-1 {

			for p = 0, solnvec.size-1 {

				tempmat.x[m][p] = solnvec.x[p]
			}
		}
	}

	for m = 1, tempmat.nrow-1 {

		for p = 0, genvec.size-1 {

			tempmat.x[m][genvec.x[p]] = rpmat.x[m-1][p]
		}
	}

	if (ns > simax) {

		// always ensure simax is divisible without remainder in ns
		// preferably a power of the same base.
		reduction_factor = ns/simax

		tempobj = new Matrix(simax+1, tempmat.ncol)

		for m = 0, tempobj.nrow-1 {

			// downsampling the original fully factorial design to a fractional one.
			// method: uniformly-spaced downsampling by ns/simax = reduction_factor. 
			// If the reduction_factor = 2 and ns >= 8 (careful: only ns = 4 and 8 were tested),
			// then the below will sample all subspace pairs (1,1, 1,2, 2,1, 2,2) exactly once. 
			// Probably anything below 2 (= half the number of simulations, ns) will oversample
			// certain subspace pairs, and anything above 2 will undersample (to be checked).
			tempobj.setrow(m, tempmat.getrow(m*(reduction_factor)))
		}

		tempmat = new Matrix(tempobj.nrow, tempobj.ncol)

		for m = 0, tempmat.nrow-1 {

			tempmat.setrow(m, tempobj.getrow(m))
		}
	}

	if (tempmat.nrow-$1 == 2) {

		// clip the second and last rows (the first, or zeroth, is default)
		tempobj = new Vector()

		tempobj.resize(tempobj.size+1)
		tempobj.x[tempobj.size-1] = 1

		tempobj.resize(tempobj.size+1)
		tempobj.x[tempobj.size-1] = tempmat.nrow-1

		tempmat = delrowmat(tempobj, tempmat)
	
	} else if (tempmat.nrow-$1 == 1) {

		// clip the last row
		tempmat = delrowmat(tempmat.nrow-1, tempmat)
	}

	rpmat = new Matrix(tempmat.nrow, tempmat.ncol)
	
	for m = 0, rpmat.nrow-1 {

		rpmat.setrow(m, tempmat.getrow(m))
	}

	savemat($s2, "rpmat.dat", rpmat, maxformvec, pheader)
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
proc getrpmat() {

	mutate()
	adj_rp($1+1, $s2)	
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
// load current unfinished solution for currently loaded model, i.e. mode_-inj level, from 
// corresponding folder in out (if it exists), if that optimization has not finished, 
// i.e. does not have the unfinished exit code, then loadopt returns 0. If it loads, then 
// it returns 1.

// load the memory vectors, replacing any environment versions as needed (see getfit, ie.
// nefunvec (no), eqvec (yes), elogvec (yes), pqvec (yes) and plogvec 
// (yes).

// The basic idea would be to load the necessary memory vectors. Some of these possess 
// an exit code identifying unfinished optimizations, such as -(nf+1) [eq], or 
// -getnp() [pq] (vs completed optimization exit codes of -2*(nf+1) [eq] 
// and -2*getnp() [pq], respectively). The unfinished optimization exit codes
 // will be used to ensure only an unfinished optimization's parameters are loaded.

// $1 = k, iampvec pos
// $2 = scount
// $3 = istart
func loaduopt() {local uopt, k, q, r, p, ind, f localobj tempmat, tempvec

	uopt = 0

	if (chkdir($s1, "\nexitmat.dat")) {

		getmat($s1, "exitmat.dat", tempmat)

		q = 0
		k = simvec.x[q]
		while (k <= simvec.x[simvec.size-1]) {

			if (!(tempmat.x[k][0] && tempmat.x[k][1])) {

				if (!tempmat.x[k][0] && tempmat.x[k][1]) {

					tempmat.x[k][0] = 1
					tempmat.x[k][1] = 0
				}

				for r = 0, 2 {

					exitlist.o($3*($2+1)+k).x[r] = tempmat.x[k][r]	
				}

				uoptvec.x[q] = 1

			}

			q += 1

			if (q == simvec.size) {

				k = simvec.x[simvec.size-1]+1
			
			} else {

				k = simvec.x[q]
			}			
		}

		while (uoptvec.contains(0)) {

			ind = uoptvec.indwhere("==", 0)
			
			uoptvec.remove(ind)
			simvec.remove(ind)
		}	
	}

	if (uoptvec.size) {

		// add into eqlist previous (completed quad) errors + current error (not necessarily from a completed quad)
		getmat($s1, "eqmat.dat", tempmat)
		
		q = 0
		k = simvec.x[q]
		while (k <= simvec.x[simvec.size-1]) {

			// if previous results have been saved, then load and re-initialize with those
			if ((ind = tempmat.getrow(k).indwhere("<", float_epsilon)) > -1) {

				eqlist.o($3*($2+1)+k).resize(0)

				// ind-2 to exclude the step-back code (ind) and tol (ind-2)
				for r = 0, ind-2 {

					eqlist.o($3*($2+1)+k).resize(eqlist.o($3*($2+1)+k).size+1)
					eqlist.o($3*($2+1)+k).x[eqlist.o($3*($2+1)+k).size-1] = tempmat.getrow(k).x[r]
				}
			}

			q += 1

			if (q < simvec.size) {

				k = simvec.x[q]

			} else {

				k = simvec.x[simvec.size-1]+1
			}
		}

		// do the same for the biophysical parameters
		getrpmat($2, $s1)
		getmat($s1, "pqmat.dat", tempmat)

		q = 0
		k = simvec.x[q]
		while (k <= simvec.x[simvec.size-1]) {

			// initialize pmat to rpmat
			pmat.setrow($3*($2+1)+k, rpmat.getrow(k))

			if ((ind = tempmat.getrow(k).indwhere("<", float_epsilon)) > -1) {

				pqlist.o($3*($2+1)+k).resize(0)

				// add into pqlist previously completed quad parameters + current parameters (not necessarily from a completed quad)
				// ind-1 to exclude the step-back code (ind)
				for p = 0, ind-1 {

					pqlist.o($3*($2+1)+k).resize(pqlist.o($3*($2+1)+k).size+1)
					pqlist.o($3*($2+1)+k).x[pqlist.o($3*($2+1)+k).size-1] = tempmat.getrow(k).x[p]
				}

				// add current parameters (not necessarily from a completed quad) into pmat, for optimization
				r = 0
				for p = pqlist.o($3*($2+1)+k).size-getnp(), pqlist.o($3*($2+1)+k).size-1 {

					pmat.x[$3*($2+1)+k][r] = pqlist.o($3*($2+1)+k).x[p]
					r += 1
				}
			}

			q += 1
				
			if (q < simvec.size) {

				k = simvec.x[q]
				
			} else {

				k = simvec.x[simvec.size-1]+1
			}				
		}		

		uopt = 1
		
		// load previous t
		getmat($s1, "tmat.dat", tempmat)

		q = 0
		k = simvec.x[q]
		while (k <= simvec.x[simvec.size-1]) {

			tlist.o($3*($2+1)+k).resize(0)

			// if previous results have been saved, then load those times
			if ((ind = indwherelast(tempmat.getrow(k), ">", float_epsilon)) > -1) {

				tlist.o($3*($2+1)+k).resize(ind+1)

				// ind-2 to exclude the step-back code (ind) and tol (ind-2)
				for r = 0, ind {

					tlist.o($3*($2+1)+k).x[r] = tempmat.getrow(k).x[r]
				}
			}

			q += 1

			if (q < simvec.size) {

				k = simvec.x[q]

			} else {

				k = simvec.x[simvec.size-1]+1
			}
		}
	}

	if (uopt) {

		print "\nUnfinished optimization check passed...\n"
	
	} else {

		print "\nFailed to load unfinished optimization in ", $s1, "\n"
	}

	return uopt
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
proc getsim() {local q, i

	if (numarg() == 2) {

		simvec = new Vector($2-$1+1)

		for q = 0, simvec.size-1 {

			simvec.x[q] = $1+q
		}		

	} else {

		simvec = new Vector(numarg())

		for i = 1, numarg() {

			simvec.x[i-1] = $i
		}
	}

	uoptvec = new Vector(simvec.size)
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
// Returns simax-adjusted ns. Does not include the zeroth (default) simulation.
func getscount() {

	ns = setgen($1, $2)

	if (ns > simax) {

		return simax
	
	} else if (ns == simax) {

		return ns-2

	} else if (ns == simax-1) {			
		
		return ns-1
	
	} else {

		return ns
	}
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
// initialize opt data matrices.

proc saveopt() {localobj tempmat

	if (!chkdir($s1, "\nemat.dat")) {

		tempmat = new Matrix($2+1, nf+2)
		savemat($s1, "emat.dat", tempmat, vformvec, eheader)
	}

	if (!chkdir($s1, "\npmat.dat")) {

		tempmat = new Matrix($2+1, getnp())
		savemat($s1, "pmat.dat", tempmat, maxformvec, pheader)
	}

	if (!chkdir($s1, "\neqmat.dat")) {

		tempmat = new Matrix($2+1, nf+2)
		savemat($s1, "eqmat.dat", tempmat, vformvec)		
	}

	if (!chkdir($s1, "\npqmat.dat")) {
	
		tempmat = new Matrix($2+1, getnp())
		savemat($s1, "pqmat.dat", tempmat, maxformvec)
	}

	if (!chkdir($s1, "\nexitmat.dat")) {

		tempmat = new Matrix($2+1, 3)
		// "%d\t" as a format does not work (!)
		savemat($s1, "exitmat.dat", tempmat, "%g\t")
	}

	if (!chkdir($s1, "\ntmat.dat")) {

		tempmat = new Matrix($2+1, 1)
		savemat($s1, "tmat.dat", tempmat, tformvec)
	}

	if (!chkdir($s1, "\nvmat.dat")) {

		tempmat = new Matrix(vdatmat.nrow, ($2+1)*nf+1)
		tempmat.setcol(0, vdatmat.getcol(0))
		savemat($s1, "vmat.dat", tempmat, vformvec, vheader)
	}		

	if (!chkdir($s1, "\nlogemat.dat")) {

		tempmat = new Matrix($2+1, nf+1)
		savemat($s1, "logemat.dat", tempmat, vformvec)
	}

	if (!chkdir($s1, "\nlogpmat.dat")) {

		tempmat = new Matrix($2+1, getnp())
		savemat($s1, "logpmat.dat", tempmat, maxformvec)
	}
}
// ---------------------------------------------------------------------------------------




// ---------------------------------------------------------------------------------------
// $s1 = save dir
// $s2 = log type (e.g. "eq")
// $o3 = vector of data to be saved
// $s4 = format string
// $5 = sim number
// $o6 = subsim number, passed as sim cycle (time) vector
proc savelog() {local k, f, ind localobj rvec, tempvec

	sprint(logstr, "%s%s", $s2, "log")

	if (numarg() >= 5) {

		if (chkdir($s1, logstr)) {
						
			sprint(filestr, "%d%s", $5, ".dat")
			sprint(logdir, "%s%s%s", $s1, logstr, "/")			

			if (strcmp($s2, "v")) {

				sprint(datastr, "%s", "")
				sprint(format, "%s%s", "%s", $s4)

				for k = 0, $o3.size-1 {

					sprint(datastr, format, datastr, $o3.x[k])
				}
				
				writestr(logdir, filestr, datastr, 0)

			} else {

				savemat(logdir, filestr, $o3, $s4)
			}
		}

	} else {

		crdir($s1, logstr)
	}
}
// ---------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------
// execute genopt over one or many processors.
// takes arguments setting iiamp start and iiamp end.
// no argument for default (all iiamp) or range (below)
// range mode: will solve based on range of indices provided
// from iampvec. Number of indiced must be even, i.e. (0,0), 
// (0,1), or (0,1,3,5), or (0, 3, 6, 6, 9, 12), etc.

// Definitions:
// ns = nd^(getnp()-1)
// scount = ns if ns < simax, else scount = simax.

proc parallex() {local k, r, m, sim, istart, scount, scounter, exitcount, total_scount, p, q, jobi, ucount, np localobj rangemat, tempvec

	print "NU/evolutionary algorithm"
	getmod()

	if (mode_ == 0) {

		np = genvec.size

	} else {

		np = getnp()
	}
	
	print np, "parameters found for NU optimization (model type: ", modstr, ")"
	print genvec.size, "parameters selected for evolution"

	scount = getscount(mode_, idata)

	if (!numarg()) {

		rangemat = new Matrix(2, 1)

		rangemat.x[0][0] = 0
		rangemat.x[1][0] = iampvec.size-1

		total_scount = (scount+1) * iampvec.size

		getiamp(0, rampstr1)
		getiamp(iampvec.size-1, rampstr2)

		print "\nOptimization selected for stimulation amplitudes from ", rampstr1, " to ", rampstr2
	
	} else if (numarg()/2 == 1) {

		rangemat = new Matrix(2, 1)

		rangemat.x[0][0] = $1
		rangemat.x[1][0] = $2

		total_scount = (scount+1) * ($2-$1+1)

		getiamp($1, rampstr1)
		getiamp($2, rampstr2)

		print "\nOptimization selected for stimulation amplitudes from ", rampstr1, " to ", rampstr2
	
	} else if (numarg()/2 == 2) {

		rangemat = new Matrix(2, 2)

		rangemat.x[0][0] = $1 
		rangemat.x[1][0] = $2

		rangemat.x[0][1] = $3
		rangemat.x[1][1] = $4

		total_scount = (scount+1) * (($2-$1+1) + ($4-$3+1))

		getiamp($1, rampstr1)
		getiamp($2, rampstr2)
		getiamp($3, rampstr3)
		getiamp($4, rampstr4)

		print "\nOptimization selected for stimulation amplitudes from ", rampstr1, " to ", rampstr2, " and ", rampstr3, " to ", rampstr4
	
	} else if (numarg()/2 == 3) {

		rangemat = new Matrix(2, 3)

		rangemat.x[0][0] = $1
		rangemat.x[1][0] = $2

		rangemat.x[0][1] = $3
		rangemat.x[1][1] = $4
		
		rangemat.x[0][2] = $5
		rangemat.x[1][2] = $6

		total_scount = (scount+1) * (($2-$1+1) + ($4-$3+1) + ($6-$5+1))

		getiamp($1, rampstr1)
		getiamp($2, rampstr2)
		getiamp($3, rampstr3)
		getiamp($4, rampstr4)
		getiamp($5, rampstr5)
		getiamp($6, rampstr6)

		print "\nOptimization selected for stimulation amplitudes from ", rampstr1, " to ", rampstr2, " and ", rampstr3, " to ", rampstr4, " and ", rampstr5, " to ", rampstr6
	}

	print "Total optimizations required for selected injection amplitude(s) = ", total_scount, "\n"

	scounter = 0
	exitcount = 0
	istart = -1

	crdir(root, "data")
	crdir(data, modstr)
	
	pmat = new Matrix(total_scount, getnp())
	eqlist = crveclist(eqlist, total_scount, 0)
	pqlist = crveclist(pqlist, total_scount, 0)
	tlist = crveclist(tlist, total_scount, 0)
	exitlist = crveclist(exitlist, total_scount, 3)

	for r = 0, rangemat.ncol-1 {

		for k = rangemat.x[0][r], rangemat.x[1][r] {

			istart += 1
			
			getiampdir(k, iampstr, iampdir)
			crdir(moddir, iampstr)
			savepelog(k, iampstr, iampdir)
			savelog(iampdir, "eq")
			savelog(iampdir, "pq")
			savelog(iampdir, "fe")
			savelog(iampdir, "fp")
			savelog(iampdir, "t")
			savelog(iampdir, "v")
			savelog(iampdir, "exit")		
			saveopt(iampdir, scount)
			
			// getsim(0, getscount(mode_, idata))
			getsim(344, 344)
			print "\n", simvec.size, "simulation(s) chosen for injection amplitude ", iampstr

			if (loaduopt(iampdir, scount, istart)) {
				
				print "\nUnfinished optimization(s) loaded for model ", modstr, "/", iampstr
				print "Total unfinished optimizations at ", iampstr, " = ", uoptvec.sum

				for sim = 0, simvec.size-1 {

					runtime = 0
					overtime = 0

					if (!chkpara()) {
						
						scounter += orgopt(k, mode_, chkpara(), uoptvec.x[sim], pmat.getrow(istart*(scount+1)+simvec.x[sim]), eqlist.o(istart*(scount+1)+simvec.x[sim]), pqlist.o(istart*(scount+1)+simvec.x[sim]), simvec.x[sim], scount, exitlist.o(istart*(scount+1)+simvec.x[sim]), tlist.o(istart*(scount+1)+simvec.x[sim]))
					
					} else {

						// cannot pass a 13th object (can pass a number) in para that is not a vector (tested: matrices and lists)
						// tested on personal OpenMPI (nrn 7.5) and NSG Stampede2 Intel Skylake (nrn 7.5)						
						llc.submit("orgopt", k, mode_, chkpara(), uoptvec.x[sim], pmat.getrow(istart*(scount+1)+simvec.x[sim]), eqlist.o(istart*(scount+1)+simvec.x[sim]), pqlist.o(istart*(scount+1)+simvec.x[sim]), simvec.x[sim], scount, exitlist.o(istart*(scount+1)+simvec.x[sim]), tlist.o(istart*(scount+1)+simvec.x[sim]))
					}
				}
			
			} else {

				print "No unfinished optimizations found for injection amplitude ", iampstr
			}
		}
	}

	// collect and save the results
	// llc.working = hoc_ac_
	while ((jobi = llc.working) != 0) {

		// jobi is sent by genopt through optimize and then data_out
		llc.take(jobi)
		ucount = llc.upkscalar()
		tempvec = llc.upkvec()

		// what emerges from each call to func genopt, i.e. +1 for each call.
		scounter += llc.retval
		ucounter += ucount

		// exitvec
		if (tempvec.x[1]) {

			if (mode_ == 0) {

				exitcount += 1
			
			} else {

				if (tempvec.x[0]) {

					exitcount += 1
				}
			}
		}
	}

	// where parallel jobs end
	llc.done()

	print "\n", scounter, "of ", total_scount, "selected current clamp optimizations returned"
	print ucounter, "of ", scounter, "optimization did not finish due to lack of simulation time. Please see readme for instructions to finish these."
	
	if (mode_ > 0) {

		print "Of the ", scounter-ucounter, "optimizations that did finish, ", exitcount, "finished both fast and slow components of the NU algorithm."
	}
	
	print "Therefore, ", scounter-exitcount, "core(s) is/are required for next round of optimization."
}
// ---------------------------------------------------------------------------------------
