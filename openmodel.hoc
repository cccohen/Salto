// Salto
// (c) Charles CH Cohen, 2014-present
// this software is released to the public under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
// International license (CC BY-NC-ND 4.0, in English).
// for any questions, please email c.cohen@gmx.com



// ------------------------------Directories---------------------------------------
strdef root, lib, ses, data

root = getcwd()
sprint(lib, "%s%s", root, "lib/")
sprint(ses, "%s%s", root, "ses/")
sprint(data, "%s%s", root, "data/")
// --------------------------------------------------------------------------------


load_file("stdgui.hoc")
chdir(lib)
load_file("startlib.hoc")
loadfile(ses, "morph.hoc")
mode_ = getvar(ses, "mode.dat")
setmaxform()
setmaxformvec()
idata = getvar(ses, "idata.dat")
setfilestr(mode_, idata)
loaddll()

iampvec = getvec(ses, iampvecfilestr, iampvec)
temprec = getvar(ses, temprecfilestr)
nrec = getstrlist(ses, recloclistfilestr, recloclist)
injvec = getvec(ses, "injlist.dat", injvec)

if (idata) {
	
	nrows = getmat(ses, vdatfilestr, vdatmat)
	tdatvec = new Vector()
	tdatvec.append(vdatmat.getcol(0))
	nsigt = getnsig(tdatvec)
	BBvec = getvec(ses, "BBvec.dat", BBvec)
	
	if (mode_ == 0) {

		createpip(nrec)
		conpip(recloclist)	
	}

} else {
	
	nsigt = 6
}

settform()
settformvec()

recseclist = loclist2seclist(recloclist, recseclist)
load_file("defsec.hoc")
axbleb_exists = getvar(ses, "axbleb_exists.dat")
bigsecl()
axontype = getaxontype()
celltypevec = getcelltype()
paral = setparal()
juxtal = setjuxtal()
lilsecl()
load_file("setnseg.hoc")
setnseg(mode_, idata, fracl, minmaxnseg)
load_file("defparam.hoc")
defparam()
defAISpts()
load_file("setparam.hoc")
initpvecs()
getmodeltype(mode_, idata)
setparam(mode_, idata)
load_file("defsps.hoc")
defmorph_sp()
defdist_sp()
defsps()
load_file("setsps.hoc")
setsps()
load_file("setmyelin.hoc")
setmy()
load_file("setstim.hoc")
seticlamp()
load_file("getparam.hoc")
load_file("writeses.hoc")

steps_per_ms = getsteps()
setdt()
tstop = gettstop(mode_, idata)

if (idata) {

	dt = setnsig(dt, nsigt)
	bess = getvar(ses, "bessfil.dat")
	nsigv = getnsig(vdatmat.getcol(1))
	nf = getnf()
	
	if ((num = iampvec.indwhere("==", stim.amp)) != -1) {
	
		tol = settol(num, !chkpara())
	
	} else {
	
		tol = settol(0, !chkpara())
	}
	
	maxstepsize = setmaxstepsize(tol)

} else {

	dt = 0.01
	bess = 100
	nsigv = 6
}

setvform()
setvformvec()

if (!chkpara()) {

	writecontrol(mode_, idata)
	writevtplot(mode_, idata, stim.amp)
	writevxplot(stim.amp)
	writeshape(stim.amp)
}

if (idata && !chkpara()) {

	writemulfit()
	
	if (iampvec.indwhere("==", stim.amp) >= 0) {
		
		writefitdata(iampvec.indwhere("==", stim.amp))
	
	} else {
		
		writefitdata(0)
	}
	
	writefitparam()
}

loadfile(ses, runcontrolfilestr)
loadfile(ses, vtplotfilestr)
loadfile(ses, vxplotfilestr)
loadfile(ses, shapeplotfilestr)
loadfile(ses, savedatafilestr)

finitialize(v_init)
initPlot()
setstimpanel()
setparampanel(mode_, idata)

load_file("getfit.hoc")
loadfile(ses, "time.dat")

adj_injbound(mode_)
print_modeltype(mode_, idata)
print_celltype()
print_axontype()
write_modeltype()
updrfp()
getoptsoln(mode_, idata)
setoptpanel()
showdom()
pelog(-1, -1)

load_file("init.hoc")
load_file("genopt.hoc")
load_file("petextract.hoc")
load_file("perank.hoc")

initfit(mode_, idata)

init()
